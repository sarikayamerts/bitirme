<<<<<<< HEAD
library(readr)
CDNOW_master <- read_csv("Downloads/CDNOW_master/CDNOW_master.txt")
View(CDNOW_master)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
rm(CDNOW_master)
View(cdnow)
cdnow$V1 <- NULL
View(cdnow)
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
View(cdnow)
colnames(cdnow) <- c("ID", "TARIH", "ADET", "FIYAT")
View(cdnow)
str(cdnow)
cdnow$ID <- as.factor(as.character(cdnow$ID))
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), “%Y%m%d”)
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), "%Y%m%d")
str(cdnow)
refDay <- max(cdnow$TARIH)
class(refDay)
as.numeric(refDay — cdnow$TARIH)
as.numeric(refDay-cdnow$TARIH)
library(dplyr)
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)-as.numeric(max(TARIH)))
View(rfm_recency)
rfm_frequency <- cdnow %>% group_by(ID) %>% summarise(Frequency = n())
View(rfm_frequency)
rfm_monetary <- cdnow %>% group_by(ID) %>% summarise(Monetary = sum(FIYAT))
View(rfm_monetary)
cdnow$ID == 1
cdnow[cdnow$ID == 1]
cdnow[cdnow$ID == 1]
filter(cdnow, ID == 1)
filter(cdnow, ID == 951)
filter(rfm_monetary, ID == 951)
source('~/bitirme/project.R')
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
source('~/bitirme/project.R')
source('~/bitirme/project.R')
View(average)
#
df <- first[bookmaker == "1xBet" | bookmaker == "Betfair" | bookmaker == "ComeOn" | bookmaker == "888Sport" | bookmaker == "Pinnacle" | bookmaker == "Betsafe"]
df <- df[complete.cases(df), ]
multinomial_model(df)
multinomial_model
View(predictions)
### clears the environment
rm(list = ls())
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
=======
project_data <- project_data[,-1]  #excluding first column
colnames(project_data) <- c("UGS", "DGS", "RNUV", "NLPG", "PU", "PG", "NUGV", "NDGV",
"GNPA", "GNPC", "GNPT")
data <- project_data[-(29:32),] #eliminating 2007 data
data_test <- project_data[(29:32),] #will be used for forecasting
UGS <- ts(data$UGS, start = 2000, frequency = 4)
DGS <- ts(data$DGS, start = 2000, frequency = 4)
plot(UGS)
plot(DGS)
acf(UGS, main = "ACF of UGS", lag.max = 28)
acf(DGS, main = "ACF of DGS", lag.max = 28)
n <- length(UGS)
s2 <- 1:n %% 4 == 2
s3 <- 1:n %% 4 == 3
s4 <- 1:n %% 4 == 0
TIME <- 1:28
data_total <- data.frame(data, TIME, S2 = s2 * 1, S3 = s3 * 1, S4 = s4 * 1)
data_test <- data.frame(data_test, TIME = 29:32, S2 = (1:4 %% 4 == 2) * 1, S3 = (1:4 %% 4 == 3) * 1, S4 = (1:4 %% 4 == 0) * 1)
getProb = function(model1, model2){
return(prob = anova(model1, model2)$`Pr(>F)`[2])
}
View(data_total)
currentmodel1_DGS <- lm(DGS~TIME + S2 + S3 + S4, data = data_total)
vec5 <- vector()
for (i in c("RNUV", "NLPG", "PU", "PG", "NUGV", "NDGV", "GNPA", "GNPC", "GNPT")) {
k <- noquote(i)
candidatemodel <- lm(DGS~TIME + S2 + S3 + S4 + get(k), data=data_total)
vec5 <- c(vec5, getProb(currentmodel1_DGS, candidatemodel))
}
vec5 <- as.data.frame(vec5)
colnames(vec5) <- c("p values")
rownames(vec5) <- c("RNUV", "NLPG", "PU", "PG", "NUGV", "NDGV", "GNPA", "GNPC", "GNPT")
p_values <- apply(vec5, 2, sort)
p_values
summary(currentmodel1_DGS)
currentmodel2_DGS <- lm(DGS~TIME + S2 + S3 + S4 + NDGV, data = data_total)
summary(currentmodel2_DGS)
model_val <- data.frame(c(summary(currentmodel1_DGS)$r.squared, summary(currentmodel2_DGS)$r.squared),
c(summary(currentmodel1_DGS)$adj.r.squared, summary(currentmodel2_DGS)$adj.r.squared))
rownames(model_val) <- c("TIME + S2 + S3 + S4", "TIME + S2 + S3 + S4 + NLPG")
colnames(model_val) <- c("R-squared", "Adjusted R-squared")
knitr::kable(model_val ,  caption = "R Squared Values of Models")
model_val <- data.frame(c(summary(currentmodel1_DGS)$r.squared, summary(currentmodel2_DGS)$r.squared),
c(summary(currentmodel1_DGS)$adj.r.squared, summary(currentmodel2_DGS)$adj.r.squared))
rownames(model_val) <- c("TIME + S2 + S3 + S4", "TIME + S2 + S3 + S4 + NDGV")
colnames(model_val) <- c("R-squared", "Adjusted R-squared")
knitr::kable(model_val ,  caption = "R Squared Values of Models")
vec6 <- vector()
for (i in c("RNUV", "PU", "PG", "NUGV", "NLPG", "GNPA", "GNPC", "GNPT")) {
k <- noquote(i)
candidatemodel <- lm(DGS~TIME + S2 + S3 + S4 + NDGV + get(k), data=data_total)
vec6 <- c(vec6, getProb(currentmodel2_DGS, candidatemodel))
}
vec6 <- as.data.frame(vec6)
colnames(vec6) <- c("p values")
rownames(vec6) <- c("RNUV", "PU", "PG", "NUGV", "NLPG", "GNPA", "GNPC", "GNPT")
p_values <- apply(vec6, 2, sort)
p_values
currentmodel3_DGS <- lm(DGS~TIME + S2 + S3 + S4 + NDGV + PU, data=data_total)
reducedmodel_DGS <- lm(DGS~TIME + S2 + S3 + S4 + PU, data=data_total)
getProb(currentmodel3_DGS,reducedmodel_DGS)
model_val <- data.frame(c(summary(currentmodel1_DGS)$r.squared,
summary(currentmodel2_DGS)$r.squared,
summary(currentmodel3_DGS)$r.squared,
summary(reducedmodel_DGS)$r.squared),
c(summary(currentmodel1_DGS)$adj.r.squared,
summary(currentmodel2_DGS)$adj.r.squared,
summary(currentmodel3_DGS)$adj.r.squared,
summary(reducedmodel_DGS)$adj.r.squared)
)
rownames(model_val) <- c("TIME + S2 + S3 + S4",
"TIME + S2 + S3 + S4 + NDGV",
"TIME + S2 + S3 + S4 + NDGV + PU",
"TIME + S2 + S3 + S4 + PU"
)
colnames(model_val) <- c("R-squared", "Adjusted R-squared")
knitr::kable(model_val ,  caption = "R Squared Values of Models")
View(data_total)
vec7 <- vector()
for (i in c("RNUV", "PG", "NUGV", "NLPG", "GNPA", "GNPC", "GNPT")) {
k <- noquote(i)
candidatemodel <- lm(DGS~TIME + S2 + S3 + S4 + NDGV + PU + get(k), data=data_total)
vec7 <- c(vec7, getProb(currentmodel3_DGS, candidatemodel))
}
vec7 <- as.data.frame(vec7)
colnames(vec7) <- c("p values")
rownames(vec7) <- c("RNUV", "PG", "NUGV", "NLPG", "GNPA", "GNPC", "GNPT")
p_values <- apply(vec7, 2, sort)
p_values
currentmodel4_DGS <- lm(DGS~TIME + S2 + S3 + S4 + NDGV + PU + GNPC, data=data_total)
reducedmodel2_DGS <- lm(DGS~TIME + S2 + S3 + S4 + NDGV + GNPC, data=data_total)
getProb(currentmodel4_DGS,reducedmodel2_DGS)
reducedmodel3_DGS <- lm(DGS~TIME + S2 + S3 + S4 + PU + GNPC, data=data_total)
getProb(currentmodel4_DGS,reducedmodel3_DGS)
#currentmodel5_DGS <- reducedmodel_DGS3
model_val <- data.frame(c(summary(currentmodel1_DGS)$r.squared,
summary(currentmodel2_DGS)$r.squared,
summary(currentmodel3_DGS)$r.squared,
summary(reducedmodel_DGS)$r.squared,
summary(currentmodel4_DGS)$r.squared,
summary(reducedmodel2_DGS)$r.squared,
summary(reducedmodel3_DGS)$r.squared),
c(summary(currentmodel1_DGS)$adj.r.squared,
summary(currentmodel2_DGS)$adj.r.squared,
summary(currentmodel3_DGS)$adj.r.squared,
summary(reducedmodel_DGS)$adj.r.squared,
summary(currentmodel4_DGS)$adj.r.squared,
summary(reducedmodel2_DGS)$adj.r.squared,
summary(reducedmodel3_DGS)$adj.r.squared)
)
rownames(model_val) <- c("TIME + S2 + S3 + S4",
"TIME + S2 + S3 + S4 + NDGV",
"TIME + S2 + S3 + S4 + NDGV + PU",
"TIME + S2 + S3 + S4 + PU",
"TIME + S2 + S3 + S4 + NDGV + PU + GNPC",
"TIME + S2 + S3 + S4 + NDGV + GNPC",
"TIME + S2 + S3 + S4 + PU + GNPC"
)
colnames(model_val) <- c("R-squared", "Adjusted R-squared")
knitr::kable(model_val ,  caption = "R Squared Values of Models")
summary(currentmodel4_DGS)
vif(currentmodel4_DGS)
vec8 <- vector()
for (i in c("RNUV", "PG", "NUGV", "NLPG", "GNPA", "GNPT")) {
k <- noquote(i)
candidatemodel <- lm(DGS~TIME + S2 + S3 + S4 + GNPC + PU + NDGV +get(k), data=data_total)
vec8 <- c(vec8, getProb(currentmodel4_DGS, candidatemodel))
}
vec8 <- as.data.frame(vec8)
colnames(vec8) <- c("p values")
rownames(vec8) <- c("RNUV", "PG", "NUGV", "NLPG", "GNPA", "GNPT")
p_values <- apply(vec8, 2, sort)
p_values
null <- lm(DGS~TIME + S2+ S3 + S4, data = data_total[,-1])
full <- lm(DGS~., data = data_total[,-1])
auto_forw <- step(null, scope=list(lower = null, upper = full), direction = "forward")
null <- lm(DGS~TIME + S2+ S3 + S4, data = data_total[,-1])
full <- lm(DGS~., data = data_total[,-1])
auto_back <- step(full, scope=list(lower = null, upper = full), direction = "backward")
model_val <- data.frame(c(summary(currentmodel1_DGS)$r.squared,
summary(currentmodel2_DGS)$r.squared,
summary(currentmodel3_DGS)$r.squared,
summary(reducedmodel_DGS)$r.squared,
summary(currentmodel4_DGS)$r.squared,
summary(reducedmodel2_DGS)$r.squared,
summary(reducedmodel3_DGS)$r.squared,
summary(auto_forw)$r.squared,
summary(auto_back)$r.squared),
c(summary(currentmodel1_DGS)$adj.r.squared,
summary(currentmodel2_DGS)$adj.r.squared,
summary(currentmodel3_DGS)$adj.r.squared,
summary(reducedmodel_DGS)$adj.r.squared,
summary(currentmodel4_DGS)$adj.r.squared,
summary(reducedmodel2_DGS)$adj.r.squared,
summary(reducedmodel3_DGS)$adj.r.squared,
summary(auto_forw)$adj.r.squared,
summary(auto_back)$adj.r.squared)
)
rownames(model_val) <- c("TIME + S2 + S3 + S4",
"TIME + S2 + S3 + S4 + NDGV",
"TIME + S2 + S3 + S4 + NDGV + PU",
"TIME + S2 + S3 + S4 + PU",
"TIME + S2 + S3 + S4 + NDGV + PU + GNPC",
"TIME + S2 + S3 + S4 + NDGV + GNPC",
"TIME + S2 + S3 + S4 + PU + GNPC",
"Forward Auto Stepwise",
"Backward Auto Stepwise"
)
colnames(model_val) <- c("R-squared", "Adjusted R-squared")
knitr::kable(model_val ,  caption = "R Squared Values of Models")
final_model_DGS <- currentmodel5_DGS
final_model_DGS <- currentmodel4_DGS
summary(final_model_DGS)
plot(final_model_DGS)
vif(final_model_DGS)
final_model_DGS <- currentmodel3_DGS
summary(final_model_DGS)
plot(final_model_DGS)
vif(final_model_DGS)
dwtest(final_model_DGS)
final_model_DGS <- currentmodel4_DGS
summary(final_model_DGS)
plot(final_model_DGS)
vif(final_model_DGS)
dwtest(final_model_DGS)
plot(final_model_DGS$residuals)
acf(final_model_DGS$residuals)
final_model_DGS <- lm(DGS~TIME + S2+ S4 +NDGV +PU + GNPC, data = data_total)
summary(final_model_DGS)
plot(final_model_DGS)
vif(final_model_DGS)
plot(final_model_DGS$residuals)
acf(final_model_DGS$residuals)
final_model_DGS <- lm(DGS~ S2+ S4 +NDGV +PU + GNPC, data = data_total)
summary(final_model_DGS)
plot(final_model_DGS)
vif(final_model_DGS)
vif(final_model_DGS)
dwtest(final_model_DGS)
final_model_DGS <- lm(DGS~ TIME +S2 +S3+ S4 +NDGV +PU, data = data_total)
summary(final_model_DGS)
plot(final_model_DGS)
vif(final_model_DGS)
dwtest(final_model_DGS)
final_model_DGS <- lm(DGS~ S2 +S3+ S4 +NDGV +PU, data = data_total)
summary(final_model_DGS)
plot(final_model_DGS)
final_model_DGS <- lm(DGS~ TIME+ S2 + S3 + S4 +NDGV +PU + GNPC, data = data_total)
summary(final_model_DGS)
plot(final_model_DGS)
vif(final_model_DGS)
final_model_DGS <- lm(DGS~ TIME+ S2 + S3 + S4 +NDGV +PU, data = data_total)
summary(final_model_DGS)
plot(final_model_DGS)
vif(final_model_DGS)
dwtest(final_model_DGS)
plot(final_model_DGS$residuals)
acf(final_model_DGS$residuals)
forecast_2007_DGS <- predict(final_model_DGS, data_test, level = 0.95)
predict1 <- data.frame(c(predict(final_model_DGS),forecast_2007_DGS))
ts(forecast_2007_DGS, start = 2007, frequency = 4)
plot(DGS, xlim = c(2000,2008), ylim = c(650000, 1400000))
lines(ts(predict1, start = 2000, frequency = 4), col = "red")
forecast_2007_DGS <- predict(final_model_DGS, data_test, level = 0.95)
predict1 <- data.frame(c(predict(final_model_DGS),forecast_2007_DGS))
ts(forecast_2007_DGS, start = 2007, frequency = 4)
plot(DGS, xlim = c(2000,2008), ylim = c(650000, 1400000))
lines(ts(predict1, start = 2000, frequency = 4), col = "red")
forecast_2007_DGS <- predict(final_model_DGS, data_test, level = 0.95)
predict1 <- data.frame(c(predict(final_model_DGS),forecast_2007_DGS))
ts(forecast_2007_DGS, start = 2007, frequency = 4)
plot(DGS, xlim = c(2000,2008))
lines(ts(predict1, start = 2000, frequency = 4), col = "red")
forecast_2007_DGS <- predict(final_model_DGS, data_test, level = 0.95)
predict1 <- data.frame(c(predict(final_model_DGS),forecast_2007_DGS))
ts(forecast_2007_DGS, start = 2007, frequency = 4)
plot(DGS, xlim = c(2000,2008), ylim = c(0, 14000000))
lines(ts(predict1, start = 2000, frequency = 4), col = "red")
forecast_2007_DGS <- predict(final_model_DGS, data_test, level = 0.95)
predict1 <- data.frame(c(predict(final_model_DGS),forecast_2007_DGS))
ts(forecast_2007_DGS, start = 2007, frequency = 4)
plot(DGS, xlim = c(2000,2008), ylim = c(2000000, 5000000))
lines(ts(predict1, start = 2000, frequency = 4), col = "red")
final_model_DGS <- currentmodel4_DGS
summary(final_model_DGS)
plot(final_model_DGS)
vif(final_model_DGS)
final_model_DGS <- reducedmodel2_DGS
summary(final_model_DGS)
plot(final_model_DGS)
final_model_DGS <- currentmodel3_DGS
summary(final_model_DGS)
plot(final_model_DGS)
dwtest(final_model_DGS)
plot(final_model_DGS$residuals)
acf(final_model_DGS$residuals)
vif(final_model_DGS)
forecast_2007_DGS <- predict(final_model_DGS, data_test, level = 0.95)
predict1 <- data.frame(c(predict(final_model_DGS),forecast_2007_DGS))
ts(forecast_2007_DGS, start = 2007, frequency = 4)
plot(DGS, xlim = c(2000,2008), ylim = c(2000000, 5000000))
lines(ts(predict1, start = 2000, frequency = 4), col = "red")
### clears the environment
rm(list = ls())
### mert's macbook github directory
#setwd("/Users/mertsarikaya/bitirme/")
### mert's windows github directory
# setwd("")
### emre's github directory
setwd("C:/Users/Hp/Desktop/Bitirme/bitirme")
>>>>>>> 9dd8ab826d282c480f3eb29fd655f6bcc590cd1d
library(readr)
library(graphics)
library(data.table)
library(verification)
library(nnet)
<<<<<<< HEAD
=======
library(anytime)
>>>>>>> 9dd8ab826d282c480f3eb29fd655f6bcc590cd1d
### implementation of shin probability calculation
# functions in this file:
# 1 - shin_prob_calculator(list)
source("shin.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
source("rps.R")
# 1 - predictions
# 2 - confusion matrix
source("model_implementation.R")
### mert's macbook database directory
<<<<<<< HEAD
setwd("/Users/mertsarikaya/Downloads/Bitirme/")
england_premier_league_details <- read_rds("england_premier_league_details.rds")
england_premier_league_raw <- read_rds("england_premier_league_raw.rds")
install.packages("googledrive")
drive_download
drive_download()
library("googledrive", lib.loc="/anaconda3/lib/R/library")
drive_download("https://drive.google.com/drive/u/1/folders/10ubZ9Qb9j1EXQ3xKF3Sg_Bc-AP68XFgS")
drive_download("https://drive.google.com/open?id=1p0hMjHi_nArn0LYt7izbws0xrbcMrsCS")
drive_download("https://drive.google.com/open?id=1dtCULF1qxcBbj-rKgW3xartla8FtYwPa")
### mert's macbook database directory
setwd("/Users/mertsarikaya/Downloads/Bitirme/")
#new matches file
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
matches
head(matches)
matches[,match_date:=anydate(date)]
library(anytime)
install.packages("anytime")
library(anytime)
matches[,match_date:=anydate(date)]
head(matches)
head(details)
rm(list = ls())
options(warn=-1)
library(readr)
library(graphics)
library(data.table)
library(verification)
library(nnet)
library(anytime)
rm(list = ls())
options(warn=-1)
library(readr)
library(graphics)
library(data.table)
library(verification)
library(nnet)
library(anytime)
### mert's macbook database directory
setwd("/Users/mertsarikaya/Downloads/Bitirme/")
#new matches file
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
head(matches)
matches <- data.table(matches)[, c("matchId", "score", "home", "away", "date"), with = FALSE]
head(matches)
matches[,date:=anydate(date)]
head(matches)
head(details)
details <- data.table(details)[, c("matchId", "bookmaker", "betType", "oddtype", "odd", "totalhandicap"), with = FALSE]
details[,match_date:=anydate(date)]
details
str(matches)
unique(matches)
matches$score
matches$score == 'NA'
is.na()
is.na(matches$score)
matc
getOption("max.print")
getOption("max.print") = 5000
setOption("max.print") = 5000
setOption("max.print")
matches[:1000]
matches[,:1000]
matches[c(1,1000),]
matches[c(1:1000),]
is.na(matches[c(1:1000),]$score)
is.na(matches[c(1001:2000),]$score)
is.na(matches[c(2001:3000),]$score)
is.na(matches[c(3001:3119),]$score)
version
matches
View(matches)
matches[0]
matches[1]
matches[2]
matches[1]
matches$date[1]
type(matches$date[1])
typeof(matches$date[1])
matches[,date:=as.Date(anydate(date))]
typeof(matches$date[1])
key(details) <- c("matchid", "bookmaker", "oddtype")
key(details) <- c("matchId", "bookmaker", "oddtype")
last <- details[unique(details[,key(details), with = FALSE]), mult = 'last']
View(last)
last <- last$betType == "1x2"
last
last <- details[unique(details[,key(details), with = FALSE]), mult = 'last']
last <- last[last$betType == "1x2"]
View(last)
matches[score == "POSTP." | score == ""]
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
library(readr)
library(graphics)
library(data.table)
library(verification)
library(nnet)
library(anytime)
=======
#setwd("/Users/mertsarikaya/Downloads/Bitirme/")
### mert's windows database directory
#setwd("")
### emre's database directory
setwd("C:/Users/Hp/Desktop/Bitirme")
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
View(matches)
matches <- data.table(matches)[, c("matchId", "score", "home", "away", "date"), with = FALSE]
matches[,date:=anydate(date)]
View(matches)
View(matches)
str(matches)
summary(matches)
next_matches <- matches[is.na(score)]
matches <- matches[!is.na(score)]
View(details)
summary(details)
View(details)
details <- data.table(details)[, c("matchId", "bookmaker", "betType", "oddtype", "odd", "totalhandicap"), with = FALSE]
View(details)
first <- details[unique(details[,key(details), with = FALSE]), mult = 'first']
key(details) <- c("matchId", "bookmaker", "oddtype")
first <- details[unique(details[,key(details), with = FALSE]), mult = 'first']
last <- details[unique(details[,key(details), with = FALSE]), mult = 'last']
View(first)
unique(matches$score)
matches[matchid == "0Ct34Nck"]
matches[matchId == "0Ct34Nck"]
View(first)
unique(first$betType)
unique(first$oddtype)
View(first)
View(matches)
matches$over_under <- matches[, over_under(score), by = 1:nrow(matches)]$V1
matches$winner <- matches[, winner(score), by = 1:nrow(matches)]$V1
View(matches)
first <- first[betType == "1x2"]
last <- last[betType == "1x2"]
first[, totalhandicap := NULL]
last[, totalhandicap := NULL]
#calculating implied probabilities
first <- first[,probs := inverse(odd)]
last <- last[,probs := inverse(odd)]
View(first)
View(first)
#calculating booksum to detect abnormalies
first <- first[,booksum := sum(probs), by=list(matchId,bookmaker)]
View(first)
first <- first[betType == "1x2"]
last <- last[betType == "1x2"]
first[, totalhandicap := NULL]
last[, totalhandicap := NULL]
View(first)
first[, booksum := NULL]
view(first)
View(first)
#calculating booksum to detect abnormalies
first <- first[,booksum := sum(probs), by=list(matchId,bookmaker)]
first <- first[booksum <= 1.15]
first <- details[unique(details[,key(details), with = FALSE]), mult = 'first']
last <- details[unique(details[,key(details), with = FALSE]), mult = 'last']
matches$over_under <- matches[, over_under(score), by = 1:nrow(matches)]$V1
matches$winner <- matches[, winner(score), by = 1:nrow(matches)]$V1
first <- first[betType == "1x2"]
last <- last[betType == "1x2"]
first[, totalhandicap := NULL]
last[, totalhandicap := NULL]
#calculating implied probabilities
first <- first[,probs := inverse(odd)]
last <- last[,probs := inverse(odd)]
#calculating booksum to detect abnormalies
first <- first[sum(probs) <= 1.15,,by=list(matchId,bookmaker)]
View(first)
#calculating booksum to detect abnormalies
first <- first[sum(probs) <= 1.15]
first <- details[unique(details[,key(details), with = FALSE]), mult = 'first']
first <- first[betType == "1x2"]
first[, totalhandicap := NULL]
#calculating implied probabilities
first <- first[,probs := inverse(odd)]
#calculating booksum to detect abnormalies
first <- first[,booksum := sum(probs),by=list(matchId,bookmaker)]
first <- first[booksum <= 1.15]
View(first)
View(first)
matches[matchId == "dvhkRjiF"]
#calculating booksum to detect abnormalies
first <- first[,booksum := sum(probs),by=list(matchId,bookmaker)]
first <- first[booksum <= 1.15]
last <- last[, booksum := sum(probs), by=list(matchId,bookmaker)]
last <- last[booksum <= 1.15]
View(first)
View(first)
first[, c("bettype", "odd", "booksum") := NULL]
View(first)
first[, c("betType", "odd", "booksum") := NULL]
last[, c("betType", "odd", "booksum") := NULL]
View(first)
#basic normalization
first <- first[, norm_prob := probs/sum(probs), by=list(matchid,bookmaker)]
#basic normalization
first <- first[, norm_prob := probs/sum(probs), by=list(matchId,bookmaker)]
last <- last[, norm_prob := probs/sum(probs), by=list(matchId,bookmaker)]
#shin normalization
first <- first[, shin_prob := round(shin_prob_calculator(probs), digits = 7) , by=list(matchId,bookmaker)]
last <- last[, shin_prob := round(shin_prob_calculator(probs), digits = 7) , by=list(matchId,bookmaker)]
View(first)
View(last)
View(first)
#widening to apply rps calculation
first[, c("probs") := NULL]
View(matches)
first <- reshape(first, idvar = c("matchId", "bookmaker"), timevar = "oddtype", direction = "wide")
first <- merge(first, matches[, .(matchId, winner)], by = "matchid")
first <- merge(first, matches[, .(matchId, winner)], by = "matchId")
View(first)
setcolorder(first, c("matchId","bookmaker","norm_prob.odd1","norm_prob.oddX", "norm_prob.odd2","shin_prob.odd1","shin_prob.oddX", "shin_prob.odd2", "winner"))
last[, c("probs") := NULL]
last <- reshape(last, idvar = c("matchId", "bookmaker"), timevar = "oddtype", direction = "wide")
last <- merge(last, matches[, .(matchId, winner)], by = "matchId")
setcolorder(last, c("matchId","bookmaker","norm_prob.odd1","norm_prob.oddX", "norm_prob.odd2","shin_prob.odd1","shin_prob.oddX", "shin_prob.odd2", "winner"))
#rps calculation
Basic_RPS <- first[, calculate_rps(norm_prob.odd1, norm_prob.oddX, norm_prob.odd2, winner), by = 1:nrow(first)]
first$Basic_RPS <- Basic_RPS$V1
View(first)
matches[matchId == "pbLO7ymp"]
details[matchId == "pbLO7ymp"]
details[matchId == "pbLO7ymp" & oddtype == "1x2"]
View(details)
details[matchId == "pbLO7ymp" & betType == "1x2"]
details[matchId == "pbLO7ymp" & betType == "1x2" & bookmaker == "youwin"]
details[matchId == "pbLO7ymp" & betType == "1x2" & bookmaker == "1xBet"]
View(last)
Shin_RPS <- first[, calculate_rps(shin_prob.odd1, shin_prob.oddX, shin_prob.odd2, winner), by = 1:nrow(first)]
first$Shin_RPS <- Shin_RPS$V1
Basic_RPS <- last[, calculate_rps(norm_prob.odd1, norm_prob.oddX, norm_prob.odd2, winner), by = 1:nrow(last)]
last$Basic_RPS <- Basic_RPS$V1
Shin_RPS <- last[, calculate_rps(shin_prob.odd1, shin_prob.oddX, shin_prob.odd2, winner), by = 1:nrow(last)]
last$Shin_RPS <- Shin_RPS$V1
rm(Basic_RPS, Shin_RPS)
Basic_RPS
View(first)
matches[matchId == "p0O1u2TM"]
details[matchId == "p0O1u2TM" & betType == "1x2" & bookmaker == "1xBet"]
matches[matchId == "pbLO7ymp"]
details[matchId == "pbLO7ymp" & betType == "1x2" & bookmaker == "1xBet"]
details[matchId == "pbLO7ymp" & betType == "1x2" & bookmaker == "1xBet" & oddtype == "odd2"]
View(last)
matches[matchId == "AqNnWxZB"]
unique(matches)
View(matches)
### Calculating average RPS's for each bookmakers (smaller values are better)
average <- first[, .(var = mean(Basic_RPS, na.rm = TRUE)), by = bookmaker]
View(average)
#rps calculation
Basic_RPS <- first[, calculate_rps(norm_prob.odd1, norm_prob.oddX, norm_prob.odd2, winner), by = 1:nrow(first)]
rm(average)
### Calculating average RPS's for each bookmakers (smaller values are better)
average <- first[, .(var = mean(Basic_RPS, na.rm = TRUE)), by = bookmaker]
View(average)
average <- merge(average, first[, .(var = mean(Shin_RPS, na.rm = TRUE)), by = bookmaker], by = "bookmaker")
average <- merge(average, last[, .(var = mean(Basic_RPS, na.rm = TRUE)), by = bookmaker], by = "bookmaker")
average <- merge(average, last[, .(var = mean(Shin_RPS, na.rm = TRUE)), by = bookmaker], by = "bookmaker")
colnames(average) <- c("bookmaker","First_Basic", "First_Shin", "Last_Basic", "Last_Shin")
View(average)
#
df <- first[bookmaker == "1xBet" | bookmaker == "Betfair" | bookmaker == "ComeOn" | bookmaker == "888Sport" | bookmaker == "Pinnacle" | bookmaker == "Betsafe"]
df <- df[complete.cases(df), ]
multinomial_model(df)
View(multinomial_model)
df <- df[complete.cases(df), ]
multinomial_model(df)
# 1 - predictions
# 2 - confusion matrix
source("model_implementation.R")
### mert's macbook github directory
#setwd("/Users/mertsarikaya/bitirme/")
### mert's windows github directory
# setwd("")
### emre's github directory
setwd("C:/Users/Hp/Desktop/Bitirme/bitirme")
>>>>>>> 9dd8ab826d282c480f3eb29fd655f6bcc590cd1d
### implementation of shin probability calculation
# functions in this file:
# 1 - shin_prob_calculator(list)
source("shin.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
source("rps.R")
# 1 - predictions
# 2 - confusion matrix
source("model_implementation.R")
<<<<<<< HEAD
matches$over_under <- matches[, over_under(score), by = 1:nrow(matches)]$V1
matches$winner <- matches[, winner(score), by = 1:nrow(matches)]$V1
matches
matches[is.na(score)]
matches[!is.na(score)]
NA
NA="NA"
is.na(NA)
first
last
View(last)
View(matches)
matches[home = "tottenham"]
matches[home == "tottenham"]
a = matches[home == "tottenham"]
View(a)
=======
### Calculating average RPS's for each bookmakers (smaller values are better)
average <- first[, .(var = mean(Basic_RPS, na.rm = TRUE)), by = bookmaker]
average <- merge(average, first[, .(var = mean(Shin_RPS, na.rm = TRUE)), by = bookmaker], by = "bookmaker")
average <- merge(average, last[, .(var = mean(Basic_RPS, na.rm = TRUE)), by = bookmaker], by = "bookmaker")
average <- merge(average, last[, .(var = mean(Shin_RPS, na.rm = TRUE)), by = bookmaker], by = "bookmaker")
colnames(average) <- c("bookmaker","First_Basic", "First_Shin", "Last_Basic", "Last_Shin")
#
df <- first[bookmaker == "1xBet" | bookmaker == "Betfair" | bookmaker == "ComeOn" | bookmaker == "888Sport" | bookmaker == "Pinnacle" | bookmaker == "Betsafe"]
df <- df[complete.cases(df), ]
multinomial_model(df)
model_RPS <- predictions[, calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(predictions)]
View(predictions)
predictions$RPS <- model_RPS$V1
rm(model_RPS)
avg <- mean(predictions$RPS)
View(average)
View(predictions)
View(predictions)
conf_matrix <<- table(test$winner_category, pred)
>>>>>>> 9dd8ab826d282c480f3eb29fd655f6bcc590cd1d
