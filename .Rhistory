if (model_type == "randomforest") {
random_forest(train, test, wide_test, metric_name = rf_metric, varimpTF = rf_imp, is_ordered = ordered)
}
model_type == "randomforest"
random_forest(train, test, wide_test, metric_name = rf_metric, varimpTF = rf_imp, is_ordered = ordered)
else if (model_type == "multinomial") {
train_glmnet(train, test)
}
train_glmnet(train, test)
### clears the environment
rm(list = ls())
if (grepl("mert", toString(getwd()))){
setwd("/Users/mertsarikaya/bitirme/")
}
if (grepl("Hp", toString(getwd()))) {
setwd("C:/Users/Hp/Desktop/Bitirme/bitirme")
}
library(readr)
library(graphics)
library(data.table)
library(verification)
library(glmnet)
library(TunePareto)
library(anytime)
library(plotly)
library(stats)
library(PMCMR)
################################################
# implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
# 2 - calculate_rps2(over, under, actual)
################################################
source("rps.R")
################################################
# converting odd1, oddX, odd2 to 1,2,3 and viceversa
# 1 - convert(arr)
################################################
source("converter.R")
# 4 - last (matchId, bookmaker, oddtype, odd)
# 5 - next_matches (matchId, score, home, away, date)
# 6 - details_change
# functions
# 1 - inverse
# 2 - over_under
# 3 - season_calc
# 4 - set_directory
# 5 - winner
################################################
source("get_dataframes.R")
### converting odds to basic and shin probabilities, gives insiders
source("convert_odds.R")
################  NOT FOR MODELS ##############
### calculate RPS for all matches using Basic and Shin probs
# lastrps <<<< required for models
source("calculate_rps.R")
### reshaping features to create train_features
source("reshape.R")
#bence böyle widelayalım
#we will do widening inside of our model prepration
#last:           matchId, bookmaker, oddtype, shin_prob
#lastrps:        matchId, bookmaker, shin_prob(1X2), winner, season, week, shinrps
#insider:        matchId, bookmaker, z
#details_change: matchId, bookmaker, oddtype, diff, winner, avg
#shin_insider:   matchId, bookmaker, shin_prob(1X2), winner, z
#shin_changes:   matchId, bookmaker, winner, shin_prob(1X2), avg(1X2)
#shin_changes_insider: matchId, bookmaker, winner, shin_prob(1X2), avg(1X2), z
shin_insider <- merge(lastrps[,c(1:6)], insider, by = c("matchId", "bookmaker"))
shin_changes <- merge(last, details_change[,c("matchId", "bookmaker", "oddtype", "avg", "winner")],by = c("matchId", "bookmaker", "oddtype"))
shin_changes <- reshape(shin_changes, idvar = c("matchId", "bookmaker", "winner"), timevar = c("oddtype"), direction = "wide")
shin_changes_insider <- merge(shin_changes, insider, by = c("matchId", "bookmaker"))
source("train_models.R")
lastrps
details_change[,c("matchId", "bookmaker", "oddtype", "avg", "winner")]
lastrps[,c(1:6)]
lastrps[,c(1:4,6)]
shin_insider_12 <- merge(lastrps[,c(1:4,6)], insider, by = c("matchId", "bookmaker"))
shin_insider_12
details_change[,c("matchId", "bookmaker", "oddtype", "avg", "winner")]
details_change[,c("matchId", "bookmaker", "oddtype", "avg", "winner")][oddtype != "oddX"]
shin_changes_12 <- merge(last, details_change[,c("matchId", "bookmaker", "oddtype", "avg", "winner")][oddtype != "oddX"],by = c("matchId", "bookmaker", "oddtype"))
shin_changes_12 <- reshape(shin_changes, idvar = c("matchId", "bookmaker", "winner"), timevar = c("oddtype"), direction = "wide")
shin_changes_12 <- reshape(shin_changes12, idvar = c("matchId", "bookmaker", "winner"), timevar = c("oddtype"), direction = "wide")
shin_changes_12 <- reshape(shin_changes_12, idvar = c("matchId", "bookmaker", "winner"), timevar = c("oddtype"), direction = "wide")
shin_changes_12
#bence böyle widelayalım
#we will do widening inside of our model prepration
#last:           matchId, bookmaker, oddtype, shin_prob
#lastrps:        matchId, bookmaker, shin_prob(1X2), winner, season, week, shinrps
#insider:        matchId, bookmaker, z
#details_change: matchId, bookmaker, oddtype, diff, winner, avg
#shin_insider:   matchId, bookmaker, shin_prob(1X2), winner, z
#shin_changes:   matchId, bookmaker, winner, shin_prob(1X2), avg(1X2)
#shin_changes_insider: matchId, bookmaker, winner, shin_prob(1X2), avg(1X2), z
shin_insider <- merge(lastrps[,c(1:6)], insider, by = c("matchId", "bookmaker"))
shin_changes <- merge(last, details_change[,c("matchId", "bookmaker", "oddtype", "avg", "winner")],by = c("matchId", "bookmaker", "oddtype"))
shin_changes <- reshape(shin_changes, idvar = c("matchId", "bookmaker", "winner"), timevar = c("oddtype"), direction = "wide")
shin_changes_insider <- merge(shin_changes, insider, by = c("matchId", "bookmaker"))
models(matches[date > '2017-07-15'], "randomforest")
# A = shin_prob
A <- models(matches_df =  matches[season == '2017-2018'],
details_df =  lastrps[,-c("Shin_RPS")],
model_type =  "randomforest")
A_ord <- models(matches_df =  matches[season == '2017-2018'],
details_df =  lastrps[,-c("Shin_RPS")],
model_type =  "randomforest",
ordered = TRUE)
AB_ord <- models(matches_df = matches[season == '2017-2018'],
details_df = shin_insider,
model_type = "randomforest",
ordered = TRUE)
matches[season == '2017-2018']
matches_df = matches[season == '2017-2018']
details_df = shin_insider
rf_metric = "Accuracy"
rf_imp = TRUE
test_match_ids <- matches_df$matchId
test_data <- details_df[matchId %in% test_match_ids]
#wide_test <- widening(test_data[,-c("norm_prob")], bookiesToKeep)
wide_test <- widening_withwinner(test_data, bookiesToKeep)
min_date <- min(matches[matchId %in% test_match_ids]$date)
train_match_ids <- matches[date < min_date]
train_data <- details_df[matchId %in% train_match_ids]
#wide_train <- widening(train_data[,-c("norm_prob")], bookiesToKeep)
wide_train <- widening_withwinner(train_data, bookiesToKeep)
wide_train <- wide_train[complete.cases(wide_train)]
wide_test <- wide_test[complete.cases(wide_test)]
train <- wide_train[,-c("matchId", "date", "week", "season")]
train_match_ids <- matches[date < min_date]
train_data <- details_df[matchId %in% train_match_ids]
details_df
train_match_ids
train_match_ids <- matches[date < min_date]$matchId
train_data <- details_df[matchId %in% train_match_ids]
#wide_train <- widening(train_data[,-c("norm_prob")], bookiesToKeep)
wide_train <- widening_withwinner(train_data, bookiesToKeep)
wide_train <- wide_train[complete.cases(wide_train)]
wide_test <- wide_test[complete.cases(wide_test)]
train <- wide_train[,-c("matchId", "date", "week", "season")]
test <- wide_test[,-c("matchId", "winner", "date", "week", "season")]
train$winner <- ordered(train$winner, levels = c("odd1", "oddX", "odd2"))
train$winner
random_forest(train, test, wide_test, metric_name = rf_metric, varimpTF = rf_imp, is_ordered = ordered)
ordered = T
random_forest(train, test, wide_test, metric_name = rf_metric, varimpTF = rf_imp, is_ordered = ordered)
library(tree)
install.packages("tree")
matches_df
matches_df = matches[week == 48][season == '2018-2019']
details_df = shin_insider
test_match_ids <- matches_df$matchId
test_data <- details_df[matchId %in% test_match_ids]
#wide_test <- widening(test_data[,-c("norm_prob")], bookiesToKeep)
wide_test <- widening_withwinner(test_data, bookiesToKeep)
min_date <- min(matches[matchId %in% test_match_ids]$date)
if (length(test_match_ids) < 12) {prev_date = 180}
if (length(test_match_ids) < 30) {prev_date = 400}
if (length(test_match_ids) >= 30) {prev_date = 1000}
lower_date <- as.Date(min_date) - prev_date
train_match_ids <- matches[date < min_date][date > lower_date]$matchId
train_data <- details_df[matchId %in% train_match_ids]
#wide_train <- widening(train_data[,-c("norm_prob")], bookiesToKeep)
wide_train <- widening_withwinner(train_data, bookiesToKeep)
wide_train <- wide_train[complete.cases(wide_train)]
wide_test <- wide_test[complete.cases(wide_test)]
train <- wide_train[,-c("matchId", "date", "week", "season")]
test <- wide_test[,-c("matchId", "winner", "date", "week", "season")]
ordered
if (ordered){train$winner <- ordered(train$winner, levels = c("odd1", "oddX", "odd2"))}
fitControl <- trainControl(method = "cv", number = 10)
tune_Grid <-  expand.grid(interaction.depth = 2,
n.trees = 500,
shrinkage = 0.1,
n.minobsinnode = 10)
set.seed(1234)
fit <- train(winner ~ ., data = train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = tune_Grid)
fit <- train(winner ~ ., data = train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = tune_Grid)
predict(fit,test,type= "prob")
output_prob <- predict(fit,test,type= "prob")
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob$matchId <- wide_test$matchId
setcolorder(output_prob, c("matchId", "odd1", "oddX", "odd2", "winner"))
output_prob <- as.data.table(output_prob)[, RPS := calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(output_prob)]
print(output_prob)
testRPS <- lastrps[matchId %in% wide_test$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
ourRPS <- mean(output_prob$RPS)
x <- data.frame("***IE 492***", ourRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
fitControl <- trainControl(method = "cv", number = 10)
tune_Grid <-  expand.grid(interaction.depth = 5,
n.trees = 1000,
shrinkage = 0.1,
n.minobsinnode = 50)
set.seed(1234)
fit <- train(winner ~ ., data = train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = tune_Grid)
output_prob <- predict(fit,test,type= "prob")
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob$matchId <- wide_test$matchId
setcolorder(output_prob, c("matchId", "odd1", "oddX", "odd2", "winner"))
output_prob <- as.data.table(output_prob)[, RPS := calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(output_prob)]
print(output_prob)
testRPS <- lastrps[matchId %in% wide_test$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
ourRPS <- mean(output_prob$RPS)
x <- data.frame("***IE 492***", ourRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
lastrps[matchId == "Qia0Lzwp"]
train$winner <- ordered(train$winner, levels = c("odd1", "oddX", "odd2"))
fitControl <- trainControl(method = "cv", number = 30)
tune_Grid <-  expand.grid(interaction.depth = 5,
n.trees = 1000,
shrinkage = 0.1,
n.minobsinnode = 50)
set.seed(1234)
fit <- train(winner ~ ., data = train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = tune_Grid)
output_prob <- predict(fit,test,type= "prob")
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob$matchId <- wide_test$matchId
setcolorder(output_prob, c("matchId", "odd1", "oddX", "odd2", "winner"))
output_prob <- as.data.table(output_prob)[, RPS := calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(output_prob)]
print(output_prob)
testRPS <- lastrps[matchId %in% wide_test$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
ourRPS <- mean(output_prob$RPS)
x <- data.frame("***IE 492***", ourRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
install.packages("rpart")
library(rpart)
train
fit <- rpart(train$winner ~ ., data = train, method="class")
summary(fit)
output_prob <- predict(fit,test,type= "prob")
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob
output_prob <- predict(fit,test,type= "prob")
output_prob
output_prob <- data.table(predict(fit,test,type= "prob"))
output_prob
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob$matchId <- wide_test$matchId
setcolorder(output_prob, c("matchId", "odd1", "oddX", "odd2", "winner"))
output_prob <- as.data.table(output_prob)[, RPS := calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(output_prob)]
print(output_prob)
testRPS <- lastrps[matchId %in% wide_test$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
ourRPS <- mean(output_prob$RPS)
x <- data.frame("***IE 492***", ourRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
fit <- rpart(train$winner ~ .,
data = train,
method="class",
control = rpart.control(minsplit = 20, minbucket = round(minsplit/3), cp = 0.01))
rpart.control(minsplit = 20, minbucket = round(minsplit/3), cp = 0.01)
fit <- rpart(train$winner ~ .,
data = train,
method="class",
control = rpart.control(minsplit = 20, minbucket = 6, cp = 0.01))
output_prob <- data.table(predict(fit,test,type= "prob"))
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob$matchId <- wide_test$matchId
setcolorder(output_prob, c("matchId", "odd1", "oddX", "odd2", "winner"))
output_prob <- as.data.table(output_prob)[, RPS := calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(output_prob)]
print(output_prob)
testRPS <- lastrps[matchId %in% wide_test$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
ourRPS <- mean(output_prob$RPS)
x <- data.frame("***IE 492***", ourRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
fit <- rpart(train$winner ~ .,
data = train,
method="class",
control = rpart.control(minsplit = 50, minbucket = 20, cp = 0.01))
summary(fit)
output_prob <- data.table(predict(fit,test,type= "prob"))
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob$matchId <- wide_test$matchId
setcolorder(output_prob, c("matchId", "odd1", "oddX", "odd2", "winner"))
output_prob <- as.data.table(output_prob)[, RPS := calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(output_prob)]
print(output_prob)
testRPS <- lastrps[matchId %in% wide_test$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
ourRPS <- mean(output_prob$RPS)
x <- data.frame("***IE 492***", ourRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
matches_df = matches[week == 48][season == '2018-2019']
details_df =  lastrps[,-c("Shin_RPS")]
test_match_ids <- matches_df$matchId
test_data <- details_df[matchId %in% test_match_ids]
#wide_test <- widening(test_data[,-c("norm_prob")], bookiesToKeep)
wide_test <- widening_withwinner(test_data, bookiesToKeep)
min_date <- min(matches[matchId %in% test_match_ids]$date)
if (length(test_match_ids) < 12) {prev_date = 180}
if (length(test_match_ids) < 30) {prev_date = 400}
if (length(test_match_ids) >= 30) {prev_date = 1000}
lower_date <- as.Date(min_date) - prev_date
train_match_ids <- matches[date < min_date][date > lower_date]$matchId
train_data <- details_df[matchId %in% train_match_ids]
#wide_train <- widening(train_data[,-c("norm_prob")], bookiesToKeep)
wide_train <- widening_withwinner(train_data, bookiesToKeep)
wide_train <- wide_train[complete.cases(wide_train)]
wide_test <- wide_test[complete.cases(wide_test)]
train <- wide_train[,-c("matchId", "date", "week", "season")]
test <- wide_test[,-c("matchId", "winner", "date", "week", "season")]
ordered
if (ordered){train$winner <- ordered(train$winner, levels = c("odd1", "oddX", "odd2"))}
random_forest(train, test, wide_test, metric_name = rf_metric, varimpTF = rf_imp, is_ordered = ordered)
train_glmnet(train, test, wide_test)
decision_tree <- function(train, test, wide_test){
set.seed(1234)
fit <- rpart(train$winner ~ .,
data = train,
method="class",
control = rpart.control(minsplit = 50, minbucket = 20, cp = 0.01))
return(fit)
}
gradient_boosting <- function(train, test, wide_test){
fitControl <- trainControl(method = "cv", number = 30)
tune_Grid <-  expand.grid(interaction.depth = 5,
n.trees = 1000,
shrinkage = 0.1,
n.minobsinnode = 50)
set.seed(1234)
fit <- train(winner ~ ., data = train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = tune_Grid)
return(fit)
}
gradient_boosting(train, test)
output_prob <- predict(fit,test,type= "prob")
colnames(output_prob) <- c("odd1", "oddX", "odd2")
predict(fit,test,type= "prob")
fit
teste
teste
test
fit
train
decision_tree(train, test)
output_prob <- predict(fit,test,type= "prob")
decision_tree <- function(train, test, wide_test){
set.seed(1234)
fit <- rpart(train$winner ~ .,
data = train,
method="class",
control = rpart.control(minsplit = 50, minbucket = 20, cp = 0.01))
output_prob <- predict(fit,test,type= "prob")
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob$matchId <- wide_test$matchId
setcolorder(output_prob, c("matchId", "odd1", "oddX", "odd2", "winner"))
output_prob <- as.data.table(output_prob)[, RPS := calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(output_prob)]
print(output_prob)
testRPS <- lastrps[matchId %in% wide_test$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
ourRPS <- mean(output_prob$RPS)
x <- data.frame("***IE 492***", ourRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
return(ourRPS)}
gradient_boosting <- function(train, test, wide_test){
fitControl <- trainControl(method = "cv", number = 30)
tune_Grid <-  expand.grid(interaction.depth = 5,
n.trees = 1000,
shrinkage = 0.1,
n.minobsinnode = 50)
set.seed(1234)
fit <- train(winner ~ ., data = train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = tune_Grid)
output_prob <- predict(fit,test,type= "prob")
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob$matchId <- wide_test$matchId
setcolorder(output_prob, c("matchId", "odd1", "oddX", "odd2", "winner"))
output_prob <- as.data.table(output_prob)[, RPS := calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(output_prob)]
print(output_prob)
testRPS <- lastrps[matchId %in% wide_test$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
ourRPS <- mean(output_prob$RPS)
x <- data.frame("***IE 492***", ourRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
return(ourRPS)}
matches_df = matches[week == 48][season == '2018-2019']
details_df =  lastrps[,-c("Shin_RPS")]
test_match_ids <- matches_df$matchId
test_data <- details_df[matchId %in% test_match_ids]
#wide_test <- widening(test_data[,-c("norm_prob")], bookiesToKeep)
wide_test <- widening_withwinner(test_data, bookiesToKeep)
min_date <- min(matches[matchId %in% test_match_ids]$date)
if (length(test_match_ids) < 12) {prev_date = 180}
if (length(test_match_ids) < 30) {prev_date = 400}
if (length(test_match_ids) >= 30) {prev_date = 1000}
lower_date <- as.Date(min_date) - prev_date
train_match_ids <- matches[date < min_date][date > lower_date]$matchId
train_data <- details_df[matchId %in% train_match_ids]
#wide_train <- widening(train_data[,-c("norm_prob")], bookiesToKeep)
wide_train <- widening_withwinner(train_data, bookiesToKeep)
wide_train <- wide_train[complete.cases(wide_train)]
wide_test <- wide_test[complete.cases(wide_test)]
train <- wide_train[,-c("matchId", "date", "week", "season")]
test <- wide_test[,-c("matchId", "winner", "date", "week", "season")]
if (ordered){train$winner <- ordered(train$winner, levels = c("odd1", "oddX", "odd2"))}
random_forest(train, test, wide_test, metric_name = rf_metric, varimpTF = rf_imp, is_ordered = ordered)
gradient_boosting(train, test, wide_test)
decision_tree(train, test, wide_test)
decision_tree <- function(train, test, wide_test){
set.seed(1234)
fit <- rpart(train$winner ~ .,
data = train,
method="class",
control = rpart.control(minsplit = 50, minbucket = 20, cp = 0.01))
output_prob <- data.table(predict(fit,test,type= "prob"))
colnames(output_prob) <- c("odd1", "oddX", "odd2")
output_prob$winner <- wide_test$winner
output_prob$matchId <- wide_test$matchId
setcolorder(output_prob, c("matchId", "odd1", "oddX", "odd2", "winner"))
output_prob <- as.data.table(output_prob)[, RPS := calculate_rps(odd1, oddX, odd2, winner), by = 1:nrow(output_prob)]
print(output_prob)
testRPS <- lastrps[matchId %in% wide_test$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
ourRPS <- mean(output_prob$RPS)
x <- data.frame("***IE 492***", ourRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
return(ourRPS)}
decision_tree(train, test, wide_test)
source("train_models.R")
# A + B = shin_prob + insider
AB <- models(matches_df = matches[week == 43][season == '2018-2019'],
details_df = shin_insider,
model_type = "randomforest")
# A + B = shin_prob + insider
AB <- models(matches_df = matches[week == 43][season == '2018-2019'],
details_df = shin_insider,
model_type = "random_forest")
AB <- models(matches_df = matches[week == 48][season == '2018-2019'],
details_df = shin_insider,
model_type = "random_forest")
AB <- models(matches_df = matches[week == 48][season == '2018-2019'],
details_df = shin_insider,
model_type = i)
for (i in c("random_forest", "decision_tree", "gradient_boosting")){
print(i)
}
for (i in c("random_forest", "decision_tree", "gradient_boosting")){
AB <- models(matches_df = matches[week == 48][season == '2018-2019'],
details_df = shin_insider,
model_type = i)
}
#bence böyle widelayalım
#we will do widening inside of our model prepration
#last:           matchId, bookmaker, oddtype, shin_prob
#lastrps:        matchId, bookmaker, shin_prob(1X2), winner, season, week, shinrps
#insider:        matchId, bookmaker, z
#details_change: matchId, bookmaker, oddtype, diff, winner, avg
#shin_insider:   matchId, bookmaker, shin_prob(1X2), winner, z
#shin_changes:   matchId, bookmaker, winner, shin_prob(1X2), avg(1X2)
#shin_changes_insider: matchId, bookmaker, winner, shin_prob(1X2), avg(1X2), z
shin <- lastrps[,-c("Shin_RPS")]
