a <- a[, norm_prob := probs/sum(probs), by=list(matchId,bookmaker)]
b <- b[, norm_prob := probs/sum(probs), by=list(matchId,bookmaker)]
#shin normalization
a <- a[, shin_prob := round(shin_prob_calculator(probs), digits = 7) , by=list(matchId,bookmaker)]
b <- b[, shin_prob := round(shin_prob_calculator(probs), digits = 7) , by=list(matchId,bookmaker)]
#deleting implied probs
a[, c("probs") := NULL]
b[, c("probs") := NULL]
a
b
}
#calculating implied probabilities
convert_odds(a, b){
a <- a[,probs := inverse(odd)]
b <- b[,probs := inverse(odd)]
a[, odd := NULL]
b[, odd := NULL]
#basic normalization
a <- a[, norm_prob := probs/sum(probs), by=list(matchId,bookmaker)]
b <- b[, norm_prob := probs/sum(probs), by=list(matchId,bookmaker)]
#shin normalization
a <- a[, shin_prob := round(shin_prob_calculator(probs), digits = 7) , by=list(matchId,bookmaker)]
b <- b[, shin_prob := round(shin_prob_calculator(probs), digits = 7) , by=list(matchId,bookmaker)]
#deleting implied probs
a[, c("probs") := NULL]
b[, c("probs") := NULL]
a
b
}
changes <- merge(first[,c(1,2,3,5)], last[,c(1,2,3,5)], c('matchId', 'bookmaker', 'oddtype'))
changes$change <- (changes$shin_prob.y - changes$shin_prob.x)/changes$shin_prob.x
#changes <- changes[order(changes$change, decreasing = TRUE),]
changes[, c("shin_prob.x","shin_prob.y") := NULL]
View(changes)
df_wide
#widening first and last for feature extraction
widening <- function(df, arr){
odds <- copy(df)
#changes <- copy(df1)
odds <- subsetBookies(arr, odds)
#changes <- subsetBookies(arr, changes)
#df_wide <- merge(odds,changes, by =c("matchId","bookmaker","oddtype"))
df_wide <- reshape(odds, idvar = c("matchId", "bookmaker"), timevar = c("oddtype"), direction = "wide")
#features selection
#df_wide[] #(0.1839656)
#df_wide[, c("shin_prob.oddX","shin_prob.odd1","shin_prob.odd2") := NULL] #(0.1839904)
#df_wide[, c("norm_prob.oddX","norm_prob.odd1","norm_prob.odd2") := NULL] #(0.1842094)
#df_wide[, c("shin_prob.odd1","norm_prob.odd1") := NULL] #(0.1839544)
#df_wide[, c("shin_prob.oddX","norm_prob.oddX") := NULL] #(0.1825615)(bunlar changing odds eklenmeden)
df_wide <- reshape(df_wide, idvar = c("matchId"), timevar = c("bookmaker"), direction = "wide")
df_wide <- merge(df_wide, matches[, .(matchId, winner, date, week, season)], by = "matchId")
df_wide
}
### reshaping first and last dataframes to feature extraction
# 1 - wide_first (matchId, shin*basic*bookmaker*oddtype, winner)
# 2 - wide_last (matchId, shin*basic*bookmaker*oddtype, winner)
source("reshape.R")
#wide_first <- widening(first, c("888sport", "SBOBET", "bwin", "Pinnacle", "Betclic"))
wide_last <- widening(last, bookiesToKeep)
View(wide_last)
### calculate RPS for all matches using Basic and Shin probs
# changes in first and last dataframes
source("calculate_rps.R")
View(lastrps)
### Calculating average RPS's for each bookmakers (smaller values are better)
#average <- first[, .(var = mean(Basic_RPS, na.rm = TRUE)), by = bookmaker]
#average <- merge(average, first[, .(var = mean(Shin_RPS, na.rm = TRUE)), by = bookmaker], by = "bookmaker")
#average <- merge(average, last[, .(var = mean(Basic_RPS, na.rm = TRUE)), by = bookmaker], by = "bookmaker")
#average <- merge(average, last[, .(var = mean(Shin_RPS, na.rm = TRUE)), by = bookmaker], by = "bookmaker")
#colnames(average) <- c("bookmaker","First_Basic", "First_Shin", "Last_Basic", "Last_Shin")
# eskiden bÃ¶yleydi season ekledik ÅŸimdi
average <- lastrps[, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
average_season <- lastrps[, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker","season")]
average_week <- lastrps[, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("week","season")]
### Deleting noncomplete season 2018-2019
wide_last <- wide_last[season != "2018-2019"]
testStart=as.Date('2017-07-15')
trainStart=as.Date('2010-08-13')
train_features <- wide_last[date>=trainStart & date<testStart]
test_features <- wide_last[date>=testStart]
n <- ncol(train_features)
not_included_feature_indices = c(1,n-3,n-2,n-1,n)
TrainSet <- nrow(train_features)
TestSet <- nrow(test_features)
### Run glmnet on train data with tuning lambda parameter based on RPS and return predictions based on lambda with minimum RPS
predictions <- train_glmnet(train_features, test_features,not_included_feature_indices,
alpha=1,nlambda=50, tune_lambda=TRUE,
nofReplications=2,nFolds=10,trace=T,max=FALSE)
### construction of model
# functions in this file:
# 1 - train_glmnet
source("train_models.R")
### Run glmnet on train data with tuning lambda parameter based on RPS and return predictions based on lambda with minimum RPS
predictions <- train_glmnet(train_features, test_features,not_included_feature_indices,
alpha=1,nlambda=50, tune_lambda=TRUE,
nofReplications=2,nFolds=10,trace=T,max=FALSE)
testRPS <- lastrps[matchId %in% predictions[["predictions"]]$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
testRPS
testRPS <- lastrps[matchId %in% predictions[["predictions"]]$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS
### NOTE: Change the comment below about the input type
myRPS <- model_report(modeltype = "GLMNET", n_of_inputs = n, Comment = "Basic + Shin", TrainSet, TestSet, trainStart, testStart, predictions, testRPS)
myRPS
predict <- predictions[["predictions"]]
predict <- predict[, RPS := calculate_rps(odd1,oddX,odd2,winner), by = 1:nrow(predict)]
averageRPS <- mean(predict$RPS)
TestRPS_min <- min(testRPS$var)
TestRPS_ave <- mean(testRPS$var)
df <- read.csv("Model_Outputs.csv")
df
df[nrow(df) + 1,] = list(modeltype,n_of_inputs,Comment,TrainSet,TestSet,trainStart,testStart,round(averageRPS,5),round(TestRPS_min,5),round(TestRPS_ave,5))
### report of model
# functions in this file:
# 1 - model_report
source("model_report.R")
### NOTE: Change the comment below about the input type
myRPS <- model_report(modeltype = "GLMNET", n_of_inputs = n, Comment = "Basic + Shin", TrainSet, TestSet, trainStart, testStart, predictions, testRPS)
myRPS
df <- read.csv("Model_Outputs.csv")
df
View(next_matches)
this_weekend <- next_matches[date >= '2018-12-08']
this_weekend
test_features
weekend_matches <- this_weekend$matchId
weekend_matches
wide_last
wide_last[matchId %in% weekend_matches]
### clears the environment
rm(list = ls())
if (grepl("mert", toString(getwd()))){
setwd("/Users/mertsarikaya/bitirme/")
}
if (grepl("Hp", toString(getwd()))) {
setwd("C:/Users/Hp/Desktop/Bitirme/bitirme")
}
library(readr)
library(graphics)
library(data.table)
library(verification)
library(glmnet)
library(TunePareto)
library(anytime)
library(plotly)
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
# 2 - calculate_rps2(over, under, actual)
source("rps.R")
### converting odd1, oddX, odd2 to 1,2,3 and viceversa
# 1 - convert(arr)
source("converter.R")
### read and prepare dataframes (not ready)
# 1 - details (matchId, bookmaker, oddtype, odd)
# 2 - matches (matchId, score, home, away, date, over_under, winner, season)
# 3 - first (matchId, bookmaker, oddtype, odd)
# 4 - last (matchId, bookmaker, oddtype, odd)
# 5 - next_matches (matchId, score, home, away, date)
source("get_dataframes.R")
### converting odds to basic and shin probabilities
# changes first and last dataframes
source("convert_odds.R")
### changing odds
#
source("changing_odds.R")
### reshaping first and last dataframes to feature extraction
# 1 - wide_first (matchId, shin*basic*bookmaker*oddtype, winner)
# 2 - wide_last (matchId, shin*basic*bookmaker*oddtype, winner)
source("reshape.R")
#wide_first <- widening(first, c("888sport", "SBOBET", "bwin", "Pinnacle", "Betclic"))
wide_last <- widening(last, bookiesToKeep)
wide_last
wide_last[date > '2018-12']
wide_last[date > '2018-12-01']
details
matches
matches[date > '2018-12-07']
next_matches
details
details[matchId == "GG8MqBL1"]
### calculate RPS for all matches using Basic and Shin probs
# changes in first and last dataframes
source("calculate_rps.R")
### calculate average RPS for all bookmakers using Basic and Shin probs
source("bookmaker_comparison.R")
last
matches[date >= start][date <= end]
matches[date >= start]
start
# or
start = '2018-12-08'
end = '2018-12-10'
start
matches[date >= start]
next_matches
next_matches[date >= start][date <= end]
next_matches[date >= start][date <= end]$matchId
next_match_ids <- next_matches[date >= start][date <= end]$matchId
last
last[matchId %in% next_match_ids]
test_data <-last[matchId %in% next_match_ids]
wide_test <- widening(test_data, bookiesToKeep)
wide_test
test_data
bool
bookiesToKeep
unique(test_data$bookmaker)
widening(test_data, bookiesToKeep)
df = test_data
arr = bookiesToKeep
odds <- copy(df)
#changes <- copy(df1)
odds <- subsetBookies(arr, odds)
odds
#df_wide <- merge(odds,changes, by =c("matchId","bookmaker","oddtype"))
df_wide <- reshape(odds, idvar = c("matchId", "bookmaker"), timevar = c("oddtype"), direction = "wide")
df_wide
df_wide <- reshape(df_wide, idvar = c("matchId"), timevar = c("bookmaker"), direction = "wide")
df_wide
### reshaping first and last dataframes to feature extraction
# 1 - wide_first (matchId, shin*basic*bookmaker*oddtype, winner)
# 2 - wide_last (matchId, shin*basic*bookmaker*oddtype, winner)
source("reshape.R")
next_match_ids <- next_matches[date >= start][date <= end]$matchId
test_data <- last[matchId %in% next_match_ids]
wide_test <- widening_test(test_data, bookiesToKeep)
wide_test
test_features <- wide_last
test_features <- wide_last
train_features <- wide_test
n <- ncol(train_features)
not_included_feature_indices = c(1,n-3,n-2,n-1,n)
### construction of model
# functions in this file:
# 1 - train_glmnet
source("train_models.R")
### Run glmnet on train data with tuning lambda parameter based on RPS and return predictions based on lambda with minimum RPS
predictions <- train_glmnet(train_features, test_features,not_included_feature_indices,
alpha=1,nlambda=50, tune_lambda=TRUE,
nofReplications=2,nFolds=10,trace=T,max=FALSE)
test_features
test_features$date
max(test_features$date)
test_features <- wide_test
train_features <- wide_last
n <- ncol(train_features)
not_included_feature_indices = c(1,n-3,n-2,n-1,n)
### construction of model
# functions in this file:
# 1 - train_glmnet
source("train_models.R")
### Run glmnet on train data with tuning lambda parameter based on RPS and return predictions based on lambda with minimum RPS
predictions <- train_glmnet(train_features, test_features,not_included_feature_indices,
alpha=1,nlambda=50, tune_lambda=TRUE,
nofReplications=2,nFolds=10,trace=T,max=FALSE)
# or
start = '2018-12-08'
end = '2018-12-10'
next_match_ids <- next_matches[date >= start][date <= end]$matchId
test_data <- last[matchId %in% next_match_ids]
test_data
wide_test <- widening_test(test_data, bookiesToKeep)
test_features <- wide_test
train_features <- wide_last
test_features
summary(test_features)
View(test_features)
View(train_features)
# or
train_features <- wide_last[season != "2018-2019"]
test_features <- wide_last[season == "2018-2019"]
df
arr
odds <- copy(df)
#changes <- copy(df1)
odds <- subsetBookies(arr, odds)
#df_wide <- merge(odds,changes, by =c("matchId","bookmaker","oddtype"))
df_wide <- reshape(odds, idvar = c("matchId", "bookmaker"), timevar = c("oddtype"), direction = "wide")
df_wide <- reshape(df_wide, idvar = c("matchId"), timevar = c("bookmaker"), direction = "wide")
df_wide
matches[, .(matchId, winner, date, week, season)
}
matches[, .(matchId, winner, date, week, season)
]
merge(df_wide, matches[, .(matchId, winner, date, week, season)], by = "matchId")
merge(df_wide, next_matches[, .(matchId, winner, date, week, season)], by = "matchId")
next_matches
next_matches$week <- next_matches[, strftime(date-1, format = "%V"), by = 1:nrow(next_matches)]$V1
next_matches$season <- next_matches[, season_calc(date), by = 1:nrow(next_matches)]$V1
merge(df_wide, next_matches[, .(matchId, winner, date, week, season)], by = "matchId")
next_matches
next_matches$score
next_matches$score[1]
is.na(next_matches$score[1])
### sets directory easily
# 1 - set_directory(name)
# name can be "code", "data"
source("set_directory.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### converting dates to seasons
# functions in this file:
# 1 - season_calc(date)
source("season_calculator.R")
next_matches$winner <- next_matches[, winner(score), by = 1:nrow(matches)]$V1
next_matches$winner <- next_matches[, winner(score), by = 1:nrow(next_matches)]$V1
### sets directory easily
# 1 - set_directory(name)
# name can be "code", "data"
source("set_directory.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### converting dates to seasons
# functions in this file:
# 1 - season_calc(date)
source("season_calculator.R")
next_matches$winner <- next_matches[, winner(score), by = 1:nrow(next_matches)]$V1
next_matches$week <- next_matches[, strftime(date-1, format = "%V"), by = 1:nrow(next_matches)]$V1
next_matches$season <- next_matches[, season_calc(date), by = 1:nrow(next_matches)]$V1
next_matches
next_match_ids <- next_matches[date >= start][date <= end]$matchId
test_data <- last[matchId %in% next_match_ids]
wide_test <- widening_test(test_data, bookiesToKeep)
test_features <- wide_test
train_features <- wide_last
### clears the environment
rm(list = ls())
if (grepl("mert", toString(getwd()))){
setwd("/Users/mertsarikaya/bitirme/")
}
if (grepl("Hp", toString(getwd()))) {
setwd("C:/Users/Hp/Desktop/Bitirme/bitirme")
}
library(readr)
library(graphics)
library(data.table)
library(verification)
library(glmnet)
library(TunePareto)
library(anytime)
library(plotly)
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
# 2 - calculate_rps2(over, under, actual)
source("rps.R")
### converting odd1, oddX, odd2 to 1,2,3 and viceversa
# 1 - convert(arr)
source("converter.R")
### read and prepare dataframes (not ready)
# 1 - details (matchId, bookmaker, oddtype, odd)
# 2 - matches (matchId, score, home, away, date, over_under, winner, season)
# 3 - first (matchId, bookmaker, oddtype, odd)
# 4 - last (matchId, bookmaker, oddtype, odd)
# 5 - next_matches (matchId, score, home, away, date)
source("get_dataframes.R")
### converting odds to basic and shin probabilities
# changes first and last dataframes
source("convert_odds.R")
### changing odds
#
source("changing_odds.R")
### reshaping first and last dataframes to feature extraction
# 1 - wide_first (matchId, shin*basic*bookmaker*oddtype, winner)
# 2 - wide_last (matchId, shin*basic*bookmaker*oddtype, winner)
source("reshape.R")
#wide_first <- widening(first, c("888sport", "SBOBET", "bwin", "Pinnacle", "Betclic"))
wide_last <- widening(last, bookiesToKeep)
### calculate RPS for all matches using Basic and Shin probs
# changes in first and last dataframes
source("calculate_rps.R")
### calculate average RPS for all bookmakers using Basic and Shin probs
source("bookmaker_comparison.R")
### Deleting noncomplete season 2018-2019
# WHY??
wide_last <- wide_last[season != "2018-2019"]
# or
start = '2018-12-08'
end = '2018-12-10'
next_match_ids <- next_matches[date >= start][date <= end]$matchId
test_data <- last[matchId %in% next_match_ids]
wide_test <- widening_test(test_data, bookiesToKeep)
test_features <- wide_test
### reshaping first and last dataframes to feature extraction
# 1 - wide_first (matchId, shin*basic*bookmaker*oddtype, winner)
# 2 - wide_last (matchId, shin*basic*bookmaker*oddtype, winner)
source("reshape.R")
# or
start = '2018-12-08'
end = '2018-12-10'
next_match_ids <- next_matches[date >= start][date <= end]$matchId
test_data <- last[matchId %in% next_match_ids]
wide_test <- widening_test(test_data, bookiesToKeep)
test_features <- wide_test
train_features <- wide_last
n <- ncol(train_features)
not_included_feature_indices = c(1,n-3,n-2,n-1,n)
### construction of model
# functions in this file:
# 1 - train_glmnet
source("train_models.R")
### Run glmnet on train data with tuning lambda parameter based on RPS and return predictions based on lambda with minimum RPS
predictions <- train_glmnet(train_features, test_features,not_included_feature_indices,
alpha=1,nlambda=50, tune_lambda=TRUE,
nofReplications=2,nFolds=10,trace=T,max=FALSE)
testRPS <- lastrps[matchId %in% predictions[["predictions"]]$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
### report of model
# functions in this file:
# 1 - model_report
source("model_report.R")
### NOTE: Change the comment below about the input type
myRPS <- model_report(modeltype = "GLMNET", n_of_inputs = n, Comment = "Basic + Shin", TrainSet, TestSet, trainStart, testStart, predictions, testRPS)
### NOTE: Change the comment below about the input type
myRPS <- model_report(modeltype = "GLMNET", n_of_inputs = n, Comment = "Basic + Shin", TrainSet, TestSet, trainStart, testStart, predictions, testRPS)
myRPS
predict <- predictions[["predictions"]]
predict <- predict[, RPS := calculate_rps(odd1,oddX,odd2,winner), by = 1:nrow(predict)]
averageRPS <- mean(predict$RPS)
predicr
predict
predict['winner'] = NULL
predict
predict['winner' := NULL]
predict["winner" := NULL]
predict[c("winner") := NULL]
predict[,c("winner") := NULL]
predict
matches[,c("matchId")]
matches[,c("matchId", "winner")]
### report of model
# functions in this file:
# 1 - model_report
source("model_report.R")
# or
start = '2018-12-03'
end = '2018-12-05'
next_match_ids <- next_matches[date >= start][date <= end]$matchId
next_match_ids
# or
start = '2018-11-28'
end = '2018-12-01'
next_match_ids <- next_matches[date >= start][date <= end]$matchId
next_match_ids
matches
matches[date > '2018-11-25']
# or
test_data <- matches[season = 48]
# or
test_data <- matches[season == 48]
test_data
# or
test_data <- matches[week == 48]
test_data
# or
test_data <- matches[week == 48][season == '2018-2019']
test_data
wide_test <- widening_test(test_data, bookiesToKeep)
# or
test_match_ids <- matches[week == 48][season == '2018-2019']$matchId
test_data <- last[matchId %in% next_match_ids]
test_data
test_data <- last[matchId %in% test_match_ids]
test_data
wide_test <- widening_test(test_data, bookiesToKeep)
wide_test
wide_test <- widening(test_data, bookiesToKeep)
wide_test
wide_last
matches[week == 48][season == '2018-2019']
wide_last[date < '2018-12-03']
train_features <- wide_last[date < '2018-12-03']
test_features <- wide_test
n <- ncol(train_features)
not_included_feature_indices = c(1,n-3,n-2,n-1,n)
### construction of model
# functions in this file:
# 1 - train_glmnet
source("train_models.R")
### Run glmnet on train data with tuning lambda parameter based on RPS and return predictions based on lambda with minimum RPS
predictions <- train_glmnet(train_features, test_features,not_included_feature_indices,
alpha=1,nlambda=50, tune_lambda=TRUE,
nofReplications=2,nFolds=10,trace=T,max=FALSE)
testRPS <- lastrps[matchId %in% predictions[["predictions"]]$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
testRPS
### report of model
# functions in this file:
# 1 - model_report
source("model_report.R")
### NOTE: Change the comment below about the input type
myRPS <- model_report(modeltype = "GLMNET", n_of_inputs = n, Comment = "Basic + Shin", TrainSet, TestSet, trainStart, testStart, predictions, testRPS)
TrainSet <- nrow(train_features)
TestSet <- nrow(test_features)
### NOTE: Change the comment below about the input type
myRPS <- model_report(modeltype = "GLMNET", n_of_inputs = n, Comment = "Basic + Shin", TrainSet, TestSet, trainStart, testStart, predictions, testRPS)
testStart=as.Date('2018-12-03')
trainStart=as.Date('2010-08-13')
### NOTE: Change the comment below about the input type
myRPS <- model_report(modeltype = "GLMNET", n_of_inputs = n, Comment = "Basic + Shin", TrainSet, TestSet, trainStart, testStart, predictions, testRPS)
myRPS
df
testRPS
