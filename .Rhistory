library(readr)
CDNOW_master <- read_csv("Downloads/CDNOW_master/CDNOW_master.txt")
View(CDNOW_master)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
rm(CDNOW_master)
View(cdnow)
cdnow$V1 <- NULL
View(cdnow)
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
View(cdnow)
colnames(cdnow) <- c("ID", "TARIH", "ADET", "FIYAT")
View(cdnow)
str(cdnow)
cdnow$ID <- as.factor(as.character(cdnow$ID))
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), “%Y%m%d”)
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), "%Y%m%d")
str(cdnow)
refDay <- max(cdnow$TARIH)
class(refDay)
as.numeric(refDay — cdnow$TARIH)
as.numeric(refDay-cdnow$TARIH)
library(dplyr)
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)-as.numeric(max(TARIH)))
View(rfm_recency)
rfm_frequency <- cdnow %>% group_by(ID) %>% summarise(Frequency = n())
View(rfm_frequency)
rfm_monetary <- cdnow %>% group_by(ID) %>% summarise(Monetary = sum(FIYAT))
View(rfm_monetary)
cdnow$ID == 1
cdnow[cdnow$ID == 1]
cdnow[cdnow$ID == 1]
filter(cdnow, ID == 1)
filter(cdnow, ID == 951)
filter(rfm_monetary, ID == 951)
source('~/bitirme/project.R')
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
source('~/bitirme/project.R')
source('~/bitirme/project.R')
View(average)
#
df <- first[bookmaker == "1xBet" | bookmaker == "Betfair" | bookmaker == "ComeOn" | bookmaker == "888Sport" | bookmaker == "Pinnacle" | bookmaker == "Betsafe"]
df <- df[complete.cases(df), ]
multinomial_model(df)
multinomial_model
View(predictions)
### clears the environment
rm(list = ls())
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
library(readr)
library(graphics)
library(data.table)
library(verification)
library(nnet)
### implementation of shin probability calculation
# functions in this file:
# 1 - shin_prob_calculator(list)
source("shin.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
source("rps.R")
# 1 - predictions
# 2 - confusion matrix
source("model_implementation.R")
### mert's macbook database directory
setwd("/Users/mertsarikaya/Downloads/Bitirme/")
england_premier_league_details <- read_rds("england_premier_league_details.rds")
england_premier_league_raw <- read_rds("england_premier_league_raw.rds")
install.packages("googledrive")
drive_download
drive_download()
library("googledrive", lib.loc="/anaconda3/lib/R/library")
drive_download("https://drive.google.com/drive/u/1/folders/10ubZ9Qb9j1EXQ3xKF3Sg_Bc-AP68XFgS")
drive_download("https://drive.google.com/open?id=1p0hMjHi_nArn0LYt7izbws0xrbcMrsCS")
drive_download("https://drive.google.com/open?id=1dtCULF1qxcBbj-rKgW3xartla8FtYwPa")
### mert's macbook database directory
setwd("/Users/mertsarikaya/Downloads/Bitirme/")
#new matches file
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
matches
head(matches)
matches[,match_date:=anydate(date)]
library(anytime)
install.packages("anytime")
library(anytime)
matches[,match_date:=anydate(date)]
head(matches)
head(details)
rm(list = ls())
options(warn=-1)
library(readr)
library(graphics)
library(data.table)
library(verification)
library(nnet)
library(anytime)
rm(list = ls())
options(warn=-1)
library(readr)
library(graphics)
library(data.table)
library(verification)
library(nnet)
library(anytime)
### mert's macbook database directory
setwd("/Users/mertsarikaya/Downloads/Bitirme/")
#new matches file
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
head(matches)
matches <- data.table(matches)[, c("matchId", "score", "home", "away", "date"), with = FALSE]
head(matches)
matches[,date:=anydate(date)]
head(matches)
head(details)
details <- data.table(details)[, c("matchId", "bookmaker", "betType", "oddtype", "odd", "totalhandicap"), with = FALSE]
details[,match_date:=anydate(date)]
details
str(matches)
unique(matches)
matches$score
matches$score == 'NA'
is.na()
is.na(matches$score)
matc
getOption("max.print")
getOption("max.print") = 5000
setOption("max.print") = 5000
setOption("max.print")
matches[:1000]
matches[,:1000]
matches[c(1,1000),]
matches[c(1:1000),]
is.na(matches[c(1:1000),]$score)
is.na(matches[c(1001:2000),]$score)
is.na(matches[c(2001:3000),]$score)
is.na(matches[c(3001:3119),]$score)
version
matches
View(matches)
matches[0]
matches[1]
matches[2]
matches[1]
matches$date[1]
type(matches$date[1])
typeof(matches$date[1])
matches[,date:=as.Date(anydate(date))]
typeof(matches$date[1])
key(details) <- c("matchid", "bookmaker", "oddtype")
key(details) <- c("matchId", "bookmaker", "oddtype")
last <- details[unique(details[,key(details), with = FALSE]), mult = 'last']
View(last)
last <- last$betType == "1x2"
last
last <- details[unique(details[,key(details), with = FALSE]), mult = 'last']
last <- last[last$betType == "1x2"]
View(last)
matches[score == "POSTP." | score == ""]
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
library(readr)
library(graphics)
library(data.table)
library(verification)
library(nnet)
library(anytime)
### implementation of shin probability calculation
# functions in this file:
# 1 - shin_prob_calculator(list)
source("shin.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
source("rps.R")
# 1 - predictions
# 2 - confusion matrix
source("model_implementation.R")
matches$over_under <- matches[, over_under(score), by = 1:nrow(matches)]$V1
matches$winner <- matches[, winner(score), by = 1:nrow(matches)]$V1
matches
matches[is.na(score)]
matches[!is.na(score)]
NA
NA="NA"
is.na(NA)
first
last
View(last)
View(matches)
matches[home = "tottenham"]
matches[home == "tottenham"]
a = matches[home == "tottenham"]
View(a)
