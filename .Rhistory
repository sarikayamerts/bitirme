library(readr)
CDNOW_master <- read_csv("Downloads/CDNOW_master/CDNOW_master.txt")
View(CDNOW_master)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
rm(CDNOW_master)
View(cdnow)
cdnow$V1 <- NULL
View(cdnow)
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
View(cdnow)
colnames(cdnow) <- c("ID", "TARIH", "ADET", "FIYAT")
View(cdnow)
str(cdnow)
cdnow$ID <- as.factor(as.character(cdnow$ID))
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), “%Y%m%d”)
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), "%Y%m%d")
str(cdnow)
refDay <- max(cdnow$TARIH)
class(refDay)
as.numeric(refDay — cdnow$TARIH)
as.numeric(refDay-cdnow$TARIH)
library(dplyr)
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)-as.numeric(max(TARIH)))
View(rfm_recency)
rfm_frequency <- cdnow %>% group_by(ID) %>% summarise(Frequency = n())
View(rfm_frequency)
rfm_monetary <- cdnow %>% group_by(ID) %>% summarise(Monetary = sum(FIYAT))
View(rfm_monetary)
cdnow$ID == 1
cdnow[cdnow$ID == 1]
cdnow[cdnow$ID == 1]
filter(cdnow, ID == 1)
filter(cdnow, ID == 951)
filter(rfm_monetary, ID == 951)
### clears the environment
rm(list = ls())
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
library(readr)
library(graphics)
library(data.table)
library(verification)
library(glmnet)
library(anytime)
library(plotly)
### implementation of shin probability calculation
# functions in this file:
# 1 - shin_prob_calculator(list)
source("shin.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### mert's macbook database directory
setwd("/Users/mertsarikaya/Downloads/Bitirme/")
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
matches <- data.table(matches)[, c("matchId", "score", "home", "away", "date"), with = FALSE]
matches <- unique(matches)
matches[,date:=anydate(date)]
next_matches <- matches[is.na(score)]
matches <- matches[!is.na(score)]
details <- data.table(details)[, c("matchId", "bookmaker", "betType", "oddtype", "odd", "totalhandicap"), with = FALSE]
details <- details[betType == '1x2']
key(details) <- c("matchId", "bookmaker", "oddtype")
first <- details[unique(details[,key(details), with = FALSE]), mult = 'first']
last <- details[unique(details[,key(details), with = FALSE]), mult = 'last']
View(first)
first[5]
first[c(1,2,3)]
first[c(1,2,3, 7,8,9)]
View(first[c(1,2,3, 7,8,9)])
df <- first[c(1,2,3,7,8,9)][:-1]
df <- first[c(1,2,3,7,8,9)][,-1]
df
df <- first[c(1,2,3,7,8,9)][,-6]
df
View(df)
View(matches)
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
library(anydate)
library(anytime)
install.packages("anytime")
matches <- data.table(matches)[, c("matchId", "score", "home", "away", "date"), with = FALSE]
matches <- unique(matches)
matches[,date:=anydate(date)]
library(anytime)
library("anytime", lib.loc="/anaconda3/lib/R/library")
### clears the environment
rm(list = ls())
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
library(readr)
library(graphics)
library(data.table)
library(verification)
library(glmnet)
library(anytime)
detach("package:anytime", unload=TRUE)
library("anytime", lib.loc="/anaconda3/lib/R/library")
devtools
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
install.packages("devtools")
library("anytime", lib.loc="/anaconda3/lib/R/library")
devtools::install_github("anytime", build_vignettes = TRUE)
library("anytime", lib.loc="/anaconda3/lib/R/library")
install.packages("anytime")
source("anytime")
### implementation of shin probability calculation
# functions in this file:
# 1 - shin_prob_calculator(list)
source("shin.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
source("rps.R")
# 1 - predictions
# 2 - confusion matrix
source("model_implementation.R")
# 1 - predictions
# 2 - confusion matrix
source("model_with_z.R")
# 1 - predictions
# 2 - confusion matrix
source("model_with_z.R")
# 1 - predictions
# 2 - confusion matrix
source("model_with_z.R")
### converting dates to seasons
# functions in this file:
# 1 - season_calc(date)
source("season_calculator.R")
### calculating insider traders
# functions in this file:
# 1 - z_calculator(list)
source("z_calculator.R")
### mert's macbook database directory
setwd("/Users/mertsarikaya/Downloads/Bitirme/")
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
matches <- data.table(matches)[, c("matchId", "score", "home", "away", "date"), with = FALSE]
matches <- unique(matches)
next_matches <- matches[is.na(score)]
matches <- matches[!is.na(score)]
details <- data.table(details)[, c("matchId", "bookmaker", "betType", "oddtype", "odd", "totalhandicap"), with = FALSE]
details <- details[betType == '1x2']
key(details) <- c("matchId", "bookmaker", "oddtype")
first <- details[unique(details[,key(details), with = FALSE]), mult = 'first']
last <- details[unique(details[,key(details), with = FALSE]), mult = 'last']
matches$over_under <- matches[, over_under(score), by = 1:nrow(matches)]$V1
matches$winner <- matches[, winner(score), by = 1:nrow(matches)]$V1
matches$season <- matches[, season_calc(date), by = 1:nrow(matches)]$V1
View(matches)
first[, totalhandicap := NULL]
last[, totalhandicap := NULL]
#calculating implied probabilities
first <- first[,probs := inverse(odd)]
last <- last[,probs := inverse(odd)]
first[, c("betType", "odd", "booksum") := NULL]
last[, c("betType", "odd", "booksum") := NULL]
#basic normalization
first <- first[, norm_prob := probs/sum(probs), by=list(matchId,bookmaker)]
last <- last[, norm_prob := probs/sum(probs), by=list(matchId,bookmaker)]
#shin normalization
first <- first[, shin_prob := round(shin_prob_calculator(probs), digits = 7) , by=list(matchId,bookmaker)]
last <- last[, shin_prob := round(shin_prob_calculator(probs), digits = 7) , by=list(matchId,bookmaker)]
#widening to apply rps calculation
first[, c("probs") := NULL]
#first[, c("probs", "norm_prob") := NULL]
wide_first <- reshape(first, idvar = c("matchId", "bookmaker"), timevar = c("oddtype"), direction = "wide")
wide_first <- reshape(wide_first, idvar = c("matchId"), timevar = c("bookmaker"), direction = "wide")
wide_first <- merge(wide_first, matches[, .(matchId, winner)], by = "matchId")
first <- reshape(first, idvar = c("matchId","bookmaker"), timevar = c("oddtype"), direction = "wide")
first <- merge(first, matches[, .(matchId, winner, season)], by = "matchId")
wide_first
View(wide_first)
last[, c("probs") := NULL]
#last[, c("probs", "norm_prob") := NULL]
wide_last <- reshape(last, idvar = c("matchId", "bookmaker"), timevar = c("oddtype"), direction = "wide")
wide_last <- reshape(wide_last, idvar = c("matchId"), timevar = c("bookmaker"), direction = "wide")
wide_last <- merge(wide_last, matches[, .(matchId, winner)], by = "matchId")
#last <- reshape(last, idvar = c("matchId", "bookmaker"), timevar = "oddtype", direction = "wide")
last <- reshape(last, idvar = c("matchId", "bookmaker"), timevar = "oddtype", direction = "wide")
last <- merge(last, matches[, .(matchId, winner, season)], by = "matchId")
#rps calculation
Basic_RPS <- first[, calculate_rps(norm_prob.odd1, norm_prob.oddX, norm_prob.odd2, winner), by = 1:nrow(first)]
first$Basic_RPS <- Basic_RPS$V1
Shin_RPS <- first[, calculate_rps(shin_prob.odd1, shin_prob.oddX, shin_prob.odd2, winner), by = 1:nrow(first)]
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
source("rps.R")
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
source("rps.R")
#rps calculation
Basic_RPS <- first[, calculate_rps(norm_prob.odd1, norm_prob.oddX, norm_prob.odd2, winner), by = 1:nrow(first)]
library(readr)
library(graphics)
library(data.table)
library(verification)
install.packages("dotCall64")
library(verification)
install.packages("spam")
library(verification)
install.packages(c("anytime", "bit", "cli", "data.table", "dimRed", "dplyr", "evaluate", "fansi", "htmlwidgets", "ipred", "IRdisplay", "later", "lattice", "magic", "MASS", "Matrix", "mgcv", "mime", "ModelMetrics", "mongolite", "odbc", "ps", "psych", "R6", "RApiDatetime", "Rcpp", "reprex", "robustbase", "rstudioapi", "survival", "tidyr", "tidyselect", "tinytex", "xfun", "xts", "zoo"))
install.packages(c("anytime", "bit", "cli", "data.table", "dimRed", "dplyr", "evaluate", "fansi", "htmlwidgets", "ipred", "IRdisplay", "later", "lattice", "magic", "MASS", "Matrix", "mgcv", "mime", "ModelMetrics", "mongolite", "odbc", "ps", "psych", "R6", "RApiDatetime", "Rcpp", "reprex", "robustbase", "rstudioapi", "survival", "tidyr", "tidyselect", "tinytex", "xfun", "xts", "zoo"))
library(anytime)
library(anytime)
library(plotly)
### implementation of shin probability calculation
# functions in this file:
# 1 - shin_prob_calculator(list)
source("shin.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
source("rps.R")
### mert's macbook database directory
setwd("/Users/mertsarikaya/Downloads/Bitirme/")
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
### clears the environment
rm(list = ls())
### mert's macbook github directory
setwd("/Users/mertsarikaya/bitirme/")
library(readr)
library(graphics)
library(data.table)
library(verification)
library(glmnet)
library(anytime)
library(plotly)
glmnet
library("glmnet", lib.loc="/anaconda3/lib/R/library")
library(Matrix)
detach("package:glmnet", unload=TRUE)
install.packages("fields")
library(verification)
install.packages("proxy")
library(verification)
install.packages("dtw")
library(verification)
library(readr)
library(graphics)
library(data.table)
library(verification)
library(glmnet)
install.packages("Matrix")
library(glmnet)
install.packages("Matrix")
library(Matrix)
