library(readr)
CDNOW_master <- read_csv("Downloads/CDNOW_master/CDNOW_master.txt")
View(CDNOW_master)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
rm(CDNOW_master)
View(cdnow)
cdnow$V1 <- NULL
View(cdnow)
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
View(cdnow)
colnames(cdnow) <- c("ID", "TARIH", "ADET", "FIYAT")
View(cdnow)
str(cdnow)
cdnow$ID <- as.factor(as.character(cdnow$ID))
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), “%Y%m%d”)
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), "%Y%m%d")
str(cdnow)
refDay <- max(cdnow$TARIH)
class(refDay)
as.numeric(refDay — cdnow$TARIH)
as.numeric(refDay-cdnow$TARIH)
library(dplyr)
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)-as.numeric(max(TARIH)))
View(rfm_recency)
rfm_frequency <- cdnow %>% group_by(ID) %>% summarise(Frequency = n())
View(rfm_frequency)
rfm_monetary <- cdnow %>% group_by(ID) %>% summarise(Monetary = sum(FIYAT))
View(rfm_monetary)
cdnow$ID == 1
cdnow[cdnow$ID == 1]
cdnow[cdnow$ID == 1]
filter(cdnow, ID == 1)
filter(cdnow, ID == 951)
filter(rfm_monetary, ID == 951)
install.packages("mlr")
install.packages("XML")
### clears the environment
rm(list = ls())
if (grepl("mert", toString(getwd()))){
setwd("/Users/mertsarikaya/bitirme/")
}
if (grepl("Hp", toString(getwd()))) {
setwd("C:/Users/Hp/Desktop/Bitirme/bitirme")
}
library(readr)
library(graphics)
library(data.table)
library(verification)
library(glmnet)
library(TunePareto)
library(anytime)
library(plotly)
### implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
# 2 - calculate_rps2(over, under, actual)
source("rps.R")
### converting odd1, oddX, odd2 to 1,2,3 and viceversa
# 1 - convert(arr)
source("converter.R")
### read and prepare dataframes (not ready)
# 1 - details (matchId, bookmaker, oddtype, odd)
# 2 - matches (matchId, score, home, away, date, over_under, winner, season)
# 3 - first (matchId, bookmaker, oddtype, odd)
# 4 - last (matchId, bookmaker, oddtype, odd)
# 5 - next_matches (matchId, score, home, away, date)
source("get_dataframes.R")
### converting odds to basic and shin probabilities
# changes first and last dataframes
source("convert_odds.R")
### changing odds
#
source("changing_odds.R")
### reshaping first and last dataframes to feature extraction
# 1 - wide_first (matchId, shin*basic*bookmaker*oddtype, winner)
# 2 - wide_last (matchId, shin*basic*bookmaker*oddtype, winner)
source("reshape.R")
#wide_first <- widening(first, c("888sport", "SBOBET", "bwin", "Pinnacle", "Betclic"))
wide_last <- widening(last, bookiesToKeep)
### calculate RPS for all matches using Basic and Shin probs
# changes in first and last dataframes
source("calculate_rps.R")
### calculate average RPS for all bookmakers using Basic and Shin probs
source("bookmaker_comparison.R")
View(average_season)
# or weekly
test_match_ids <- matches[week == 48][season == '2018-2019']$matchId
test_data <- last[matchId %in% test_match_ids]
wide_test <- widening(test_data, bookiesToKeep)
test_features <- wide_test
train_features <- wide_last[date < '2018-12-03']
testStart=as.Date('2018-12-03')
trainStart=as.Date('2010-08-13')
n <- ncol(train_features)
not_included_feature_indices = c(1,n-3,n-2,n-1,n)
TrainSet <- nrow(train_features)
TestSet <- nrow(test_features)
### construction of model
# functions in this file:
# 1 - train_glmnet
source("train_models.R")
### Run glmnet on train data with tuning lambda parameter based on RPS and return predictions based on lambda with minimum RPS
predictions <- train_glmnet(train_features, test_features,not_included_feature_indices,
alpha=1,nlambda=50, tune_lambda=TRUE,
nofReplications=2,nFolds=10,trace=T,max=FALSE)
predictions
average
testRPS
testRPS <- lastrps[matchId %in% predictions[["predictions"]]$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
testRPS
last
last[bookmaker == "12BET"]
last[bookmaker == "12BET"][matchId %in% predictions[["predictions"]]$matchId]
last[bookmaker == "12BET"][matchId %in% predictions[["predictions"]]$matchId][,-4]
widening(last, "12BET")
#en iyisi 12BET, rps'i 0.176
#12bet'in bu maçlara verdiği last oranları bulalım
portfolio_df <- last[bookmaker == "12BET"][matchId %in% predictions[["predictions"]]$matchId][,-4]
widening(portfolio_df, "12BET")
df1 <- widening(portfolio_df, "12BET")
predictions[["predictions"]]
df2 <- predictions[["predictions"]]
View(df1)
View(df2)
bookmaker_pred <- widening(portfolio_df, "12BET")
our_pred <- predictions[["predictions"]]
View(our_pred)
View(bookmaker_pred)
bookmaker_pred <- widening(portfolio_df, "12BET")[,c(1:4)]
bookmaker_pred
bookmaker_pred <- widening(portfolio_df, "12BET")[,c(1,2,4,3)]
bookmaker_pred
colnames(our_pred)
colnames(bookmaker_pred) <- colnames(our_pred)
bookmaker_pred <- widening(portfolio_df, "12BET")[,c(1,5,2,4,3)]
colnames(bookmaker_pred) <- colnames(our_pred)
bookmaker_pred - our_pred
merge(our_pred, bookmaker_pred, on = c("matchId", "winner"))
merge(our_pred, bookmaker_pred, on = c("matchId"))
differences <- merge(our_pred, bookmaker_pred, on = c("matchId"))
differences[, odd1.x-odd1.y, by = 1:nrow(differences)]$V1
differences$odd1diff <- differences[, odd1.x-odd1.y, by = 1:nrow(differences)]$V1
differences
differences <- merge(our_pred, bookmaker_pred, on = c("matchId"))
differences$odd1_diff <- differences[, odd1.x-odd1.y, by = 1:nrow(differences)]$V1
differences$oddX_diff <- differences[, oddX.x-oddX.y, by = 1:nrow(differences)]$V1
differences$odd2_diff <- differences[, odd2.x-odd2.y, by = 1:nrow(differences)]$V1
differences
View(differences)
differences[, which.max(odd1_diff,oddX_diff,odd2_diff), by = 1:nrow(differences)]$V1
differences[, which.max(odd1_diff,oddX_diff,odd2_diff), by = 1:nrow(differences)]$V1
odd1_diff
differences
[,c(10:12)]
[,c(10,11,12)]
differences[,c(10,11,12)]
differences[,c(10:12)]
apply(differences[,c(10:12)],1,max)
apply(differences[,c(10:12)],1,max.col)
cbind(1:nrow(differences[,c(10:12)]), max.col(differences[,c(10:12)], 'first'))
max.col(differences[,c(10:12)], 'first')
differences[, which.max(odd1_diff,oddX_diff,odd2_diff), by = 1:nrow(differences)]$V1
max.col(differences[,c(10:12)], 'first')
convert(max.col(differences[,c(10:12)], 'first'))
convert(max.col(differences[,c(10:12)], 'first'))
differences
differences$winner.x
actual_outcome <- differences$winner.x
results <- cbind(we_bet_on, actual_outcome)
we_bet_on <- convert(max.col(differences[,c(10:12)], 'first'))
actual_outcome <- differences$winner.x
results <- cbind(we_bet_on, actual_outcome)
results
portfolio_df
last
details
results <- cbind(differences$matchId, we_bet_on, actual_outcome)
results
matchId <- differences$matchId
results <- cbind(matchId, we_bet_on, actual_outcome)
results
head(details)
noquote(results)
noquote(results)
details[(matchId == 8Gl5Kfhj) & (oddtype == oddX)]
details
details[(matchId == 8Gl5Kfhj)]
details[(matchId == "8Gl5Kfhj")]
results <- cbind(matchId, we_bet_on, actual_outcome)
details[(matchId == "8Gl5Kfhj") & (bookmaker == "12BET")]
details[(matchId == "8Gl5Kfhj") & (bookmaker == "12BET") & (oddtype == "oddX")]
last(details[(matchId == "8Gl5Kfhj") & (bookmaker == "12BET") & (oddtype == "oddX")])
last(details[(matchId == "8Gl5Kfhj") & (bookmaker == "12BET") & (oddtype == "oddX")])$odd
results
length(results)
nrow(results)
matrix(10, 1, 0)
matrix(1, 10, 0)
matrix(1, 10, 1)
results <- cbind(differences$matchId, we_bet_on, actual_outcome, matrix(1, 10, 1))
results
results <- cbind(differences$matchId, we_bet_on, actual_outcome, matrix(1, 10, 2))
results
results <- cbind(differences$matchId, we_bet_on, actual_outcome, matrix(1, 10, 3))
colnames(results) <- c("matchId", "we_bet_on", "actual_outcome", "odd", "bet_amount", "on_hand")
resukts
results
results$matchId
results['matchId']
typeof(results)
results <- as.data.table(cbind(differences$matchId, we_bet_on, actual_outcome, matrix(1, 10, 3)))
colnames(results) <- c("matchId", "we_bet_on", "actual_outcome", "odd", "bet_amount", "on_hand")
results
results$matchId[1]
1:nrow(results)
for (i in 1:nrow(results)){
results$odd[i] <- last(details[(matchId == results$matchId[i]) & (bookmaker == "12BET") & (oddtype == results$we_bet_on[i])])$odd
}
results
for (i in 1:nrow(results)){
results$odd[i] <- last(details[(matchId == results$matchId[i]) & (bookmaker == "12BET") & (oddtype == results$we_bet_on[i])])$odd
if(results$we_bet_on[i] == results$actual_outcome[i]){
results$on_hand[i] <- results$bet_amount[i] * results$odd[i]
}
else{
results$on_hand[i] <- 0
}
}
results$bet_amount[i]
i
integer(results$bet_amount[i])
as.integer(results$bet_amount[i])
for (i in 1:nrow(results)){
results$odd[i] <- last(details[(matchId == results$matchId[i]) & (bookmaker == "12BET") & (oddtype == results$we_bet_on[i])])$odd
if(results$we_bet_on[i] == results$actual_outcome[i]){
results$on_hand[i] <- as.integer(results$bet_amount[i]) * as.integer(results$odd[i])
}
else{
results$on_hand[i] <- 0
}
}
results
as.integer(results$odd[i])
as.integer(results$bet_amount[i])
for (i in 1:nrow(results)){
results$odd[i] <- last(details[(matchId == results$matchId[i]) & (bookmaker == "12BET") & (oddtype == results$we_bet_on[i])])$odd
if(results$we_bet_on[i] == results$actual_outcome[i]){
results$on_hand[i] <- as.integer(results$bet_amount[i]) * as.double(results$odd[i])
}
else{
results$on_hand[i] <- 0
}
}
results
matches
matches[season == "2018-2019"]
matches[season == "2018-2019"]$week
unique(matches[season == "2018-2019"]$week)
i = 35
1:10
noquote(unique(matches[season == "2018-2019"]$week))
matches[season == "2018-2019"][week = 35]
matches[season == "2018-2019"][week == 35]
matches[season == "2018-2019"][week == 35]$date
min(matches[season == "2018-2019"][week == 35]$date)
testRPS
testRPS$bookmaker[1]
results
print(results)
### report of model
# functions in this file:
# 1 - model_report
source("model_report.R")
"mert " + str(i)
i
paste("mert ", 5)
myRPS <- model_report("GLMNET", n, paste("Basic + Shin Week ", i), TrainSet, TestSet, trainStart, testStart, predictions, testRPS)
myRPS
testRPS
rbind(testRPS, c("BAYDO", myRPS))
c("BAYDO", myRPS)
as.data.table(c("BAYDO", myRPS))
as.data.table(("BAYDO", myRPS))
as.data.table(("BAYDO", myRPS),)
as.data.table(,c("BAYDO", myRPS))
as.data.table(r("BAYDO", myRPS))
data.frame("mert", 14)
data.frame("Baydo", myRPS)
x <- data.frame("Baydo", myRPS)
names(x) <- names(testRPS)
x
rbind(testRPS, x)
rbind(testRPS, x)[order(testRPS$var),]
testRPS
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
testRPS
## for all weeks in a season
for (i in noquote(unique(matches[season == "2018-2019"]$week))){
test_match_ids <- matches[week == i][season == '2018-2019']$matchId
test_data <- last[matchId %in% test_match_ids]
wide_test <- widening(test_data, bookiesToKeep)
test_features <- wide_test
min_date <- min(matches[season == "2018-2019"][week == i]$date)
train_features <- wide_last[date < min_date]
testStart=as.Date(min_date)
trainStart=as.Date('2010-08-13')
n <- ncol(train_features)
not_included_feature_indices = c(1,n-3,n-2,n-1,n)
TrainSet <- nrow(train_features)
TestSet <- nrow(test_features)
predictions <- train_glmnet(train_features, test_features,not_included_feature_indices,
alpha=1,nlambda=50, tune_lambda=TRUE,
nofReplications=2,nFolds=10,trace=T,max=FALSE)
testRPS <- lastrps[matchId %in% predictions[["predictions"]]$matchId][, .(var = mean(Shin_RPS, na.rm = TRUE)), by = c("bookmaker")]
testRPS <- testRPS[order(testRPS$var),]
best_bookmaker <- testRPS$bookmaker[1]
portfolio_df <- last[bookmaker == best_bookmaker][matchId %in% predictions[["predictions"]]$matchId][,-4]
bookmaker_pred <- widening(portfolio_df, best_bookmaker)[,c(1,5,2,4,3)]
our_pred <- predictions[["predictions"]]
colnames(bookmaker_pred) <- colnames(our_pred)
differences <- merge(our_pred, bookmaker_pred, on = c("matchId"))
differences$odd1_diff <- differences[, odd1.x-odd1.y, by = 1:nrow(differences)]$V1
differences$oddX_diff <- differences[, oddX.x-oddX.y, by = 1:nrow(differences)]$V1
differences$odd2_diff <- differences[, odd2.x-odd2.y, by = 1:nrow(differences)]$V1
we_bet_on <- convert(max.col(differences[,c(10:12)], 'first'))
actual_outcome <- differences$winner.x
results <- as.data.table(cbind(differences$matchId, we_bet_on, actual_outcome, matrix(1, 10, 3)))
colnames(results) <- c("matchId", "we_bet_on", "actual_outcome", "odd", "bet_amount", "on_hand")
for (i in 1:nrow(results)){
results$odd[i] <- last(details[(matchId == results$matchId[i]) & (bookmaker == "12BET") & (oddtype == results$we_bet_on[i])])$odd
if(results$we_bet_on[i] == results$actual_outcome[i]){
results$on_hand[i] <- as.integer(results$bet_amount[i]) * as.double(results$odd[i])
}
else{
results$on_hand[i] <- 0
}
}
print(results)
myRPS <- model_report("GLMNET", n, paste("Basic + Shin Week ", i), TrainSet, TestSet, trainStart, testStart, predictions, testRPS)
x <- data.frame("Baydo", myRPS)
names(x) <- names(testRPS)
testRPS <- rbind(testRPS, x)
testRPS <- testRPS[order(testRPS$var),]
print(testRPS)
}
warnings()
df <- read.csv("Model_Outputs.csv")
df
View(df)
library(caret)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
control
seed <- 7
metric <- "RPS"
set.seed(seed)
test_features
train_features
# or weekly
test_match_ids <- matches[week == 48][season == '2018-2019']$matchId
test_data <- last[matchId %in% test_match_ids]
wide_test <- widening(test_data, bookiesToKeep)
test_features <- wide_test
train_features <- wide_last[date < '2018-12-03']
n <- ncol(train_features)
n
train_features[,c(-1)]
train_features[,c(-1, -92, -93, -94, -95)]
train_features <- train_features[,c(-1, -92, -93, -94, -95)]
test_features <- test_features[,c(-1, -92, -93, -94, -95)]
train_features[,c(-1, -92, -93, -94, -95)]
train_features
test_features <- wide_test
train_features <- wide_last[date < '2018-12-03']
train_features
#rf
train_y <- convert(train_features$winner)
train_y
train_features <- train_features[,c(-1, -92, -93, -94, -95)]
mtry <- sqrt(ncol(train_x))
#rf
train_y <- convert(train_features$winner)
train_x <- train_features[,c(-1, -92, -93, -94, -95)]
View(train_x)
# or weekly
test_match_ids <- matches[week == 48][season == '2018-2019']$matchId
test_data <- last[matchId %in% test_match_ids]
wide_test <- widening(test_data, bookiesToKeep)
test_features <- wide_test
train_features <- wide_last[date < '2018-12-03']
train_y <- convert(train_features$winner)
train_x <- train_features[,c(-1, -92, -93, -94, -95)]
test_x <- test_features[,c(-1, -92, -93, -94, -95)]
control <- trainControl(method="repeatedcv", number=10, repeats=3)
seed <- 7
metric <- "RPS"
set.seed(seed)
mtry <- sqrt(ncol(train_x))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(train_y, data=train_x, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
test_features <- wide_test
train_features <- wide_last[date < '2018-12-03']
train <- train_features[,c(-1, -93, -94, -95)]
rf_default <- train(winner~., data=train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
rf_default
rf_default <- train(convert(winner)~., data=train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
print(rf_default)
train
train$winner <- convert(train$winner)
rf_default <- train(winner~., data=train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
train$winner
as.integer(train$winner)
test_features <- wide_test
train_features <- wide_last[date < '2018-12-03']
train <- train_features[,c(-1, -93, -94, -95)]
train$winner <- as.integer(convert(train$winner))
control <- trainControl(method="repeatedcv", number=10, repeats=3)
seed <- 7
metric <- "RPS"
set.seed(seed)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(winner~., data=train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
print(rf_default)
trai
train
complete.cases(train)
train[complete.cases(train)]
train <- train[complete.cases(train)]
rf_default <- train(winner~., data=train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
print(rf_default)
predict(rf_default, test_x, type = "prob")
predict(rf_default, test_x)
View(tunegrid)
