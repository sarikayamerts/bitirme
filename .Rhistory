library(readr)
CDNOW_master <- read_csv("Downloads/CDNOW_master/CDNOW_master.txt")
View(CDNOW_master)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
rm(CDNOW_master)
View(cdnow)
cdnow$V1 <- NULL
View(cdnow)
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
cdnow <- read.table("Downloads/CDNOW_master/CDNOW_master.txt")
colnames(cdnow) <- c(“ID”, “TARIH”, “ADET”, “FIYAT”)
View(cdnow)
colnames(cdnow) <- c("ID", "TARIH", "ADET", "FIYAT")
View(cdnow)
str(cdnow)
cdnow$ID <- as.factor(as.character(cdnow$ID))
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), “%Y%m%d”)
cdnow$TARIH <- as.Date(as.character(cdnow$TARIH), "%Y%m%d")
str(cdnow)
refDay <- max(cdnow$TARIH)
class(refDay)
as.numeric(refDay — cdnow$TARIH)
as.numeric(refDay-cdnow$TARIH)
library(dplyr)
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)—as.numeric(max(TARIH)))
rfm_recency <- cdnow %>% group_by(ID) %>% summarise(Recency = as.numeric(refDay)-as.numeric(max(TARIH)))
View(rfm_recency)
rfm_frequency <- cdnow %>% group_by(ID) %>% summarise(Frequency = n())
View(rfm_frequency)
rfm_monetary <- cdnow %>% group_by(ID) %>% summarise(Monetary = sum(FIYAT))
View(rfm_monetary)
cdnow$ID == 1
cdnow[cdnow$ID == 1]
cdnow[cdnow$ID == 1]
filter(cdnow, ID == 1)
filter(cdnow, ID == 951)
filter(rfm_monetary, ID == 951)
install.packages("mlr")
install.packages("XML")
install.packages("e1071")
install.packages("e1071") --host
config.log
install.packages('e1071', dependencies=TRUE)
install.packages("e1071")
################################################
# read and prepare dataframes
# 1 - details (matchId, bookmaker, oddtype, odd)
# 2 - matches (matchId, score, home, away, date, over_under, winner, season)
# 3 - first (matchId, bookmaker, oddtype, odd)
# 4 - last (matchId, bookmaker, oddtype, odd)
# 5 - next_matches (matchId, score, home, away, date)
################################################
source("get_dataframes.R")
### clears the environment
rm(list = ls())
if (grepl("mert", toString(getwd()))){
setwd("/Users/mertsarikaya/bitirme/")
}
if (grepl("Hp", toString(getwd()))) {
setwd("C:/Users/Hp/Desktop/Bitirme/bitirme")
}
library(readr)
library(graphics)
library(data.table)
library(verification)
library(glmnet)
library(TunePareto)
library(anytime)
library(plotly)
library(stats)
library(PMCMR)
################################################
# implementation of ranked probability score
# functions in this file:
# 1 - calculate_rps(home, draw, away, actual)
# 2 - calculate_rps2(over, under, actual)
################################################
source("rps.R")
################################################
# converting odd1, oddX, odd2 to 1,2,3 and viceversa
# 1 - convert(arr)
################################################
source("converter.R")
################################################
# read and prepare dataframes
# 1 - details (matchId, bookmaker, oddtype, odd)
# 2 - matches (matchId, score, home, away, date, over_under, winner, season)
# 3 - first (matchId, bookmaker, oddtype, odd)
# 4 - last (matchId, bookmaker, oddtype, odd)
# 5 - next_matches (matchId, score, home, away, date)
################################################
source("get_dataframes.R")
details_change
details_change[matchId == "004f4ING"]
details_change[matchId == "004f4ING"][bookmaker == "12BET"]
last
details_change
### converting odds to basic and shin probabilities, gives insiders
source("convert_odds.R")
### reshaping features to create train_features
source("reshape.R")
shin_wide <- widening(last[,-4], bookiesToKeep)
last
################################################
# read and prepare dataframes
# 1 - details (matchId, bookmaker, oddtype, odd)
# 2 - matches (matchId, score, home, away, date, over_under, winner, season)
# 3 - first (matchId, bookmaker, oddtype, odd)
# 4 - last (matchId, bookmaker, oddtype, odd)
# 5 - next_matches (matchId, score, home, away, date)
# 6 - details_change
################################################
source("get_dataframes.R")
last
insider
77152*3
details_change
merge(last, details_change, by = c("matchId", "bookmaker", "oddtype"))
details_change
last
################################################
# read and prepare dataframes
# 1 - details (matchId, bookmaker, oddtype, odd)
# 2 - matches (matchId, score, home, away, date, over_under, winner, season)
# 3 - first (matchId, bookmaker, oddtype, odd)
# 4 - last (matchId, bookmaker, oddtype, odd)
# 5 - next_matches (matchId, score, home, away, date)
# 6 - details_change
################################################
source("get_dataframes.R")
last
### sets directory easily
# 1 - set_directory(name)
# name can be "code", "data"
source("set_directory.R")
### implementation of converting match results from string to {over, under, 1, X, 2} types of outcome
# functions in this file:
# 1 - winner(score)
# 2 - over_under(score)
# 3 - inverse(odd)
source("match_scores.R")
### converting dates to seasons
# functions in this file:
# 1 - season_calc(date)
source("season_calculator.R")
set_directory("data")
#read raw data
matches <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds")
details <- read_rds("df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds")
#prepare matches
matches <- data.table(matches)[, c("matchId", "score", "home", "away", "date"), with = FALSE]
matches <- unique(matches)
matches[,date:=anydate(date)]
next_matches <- matches[is.na(score)]
matches <- matches[!is.na(score)]
matches$over_under <- matches[, over_under(score), by = 1:nrow(matches)]$V1
matches$winner <- matches[, winner(score), by = 1:nrow(matches)]$V1
matches$week <- matches[, strftime(date-1, format = "%V"), by = 1:nrow(matches)]$V1
matches$season <- matches[, season_calc(date), by = 1:nrow(matches)]$V1
next_matches$winner <- next_matches[, winner(score), by = 1:nrow(next_matches)]$V1
next_matches$week <- next_matches[, strftime(date-1, format = "%V"), by = 1:nrow(next_matches)]$V1
next_matches$season <- next_matches[, season_calc(date), by = 1:nrow(next_matches)]$V1
#prepare details and details_change
details <- details[order(date)]
details_change <- details
details <- data.table(details)[, c("matchId", "bookmaker", "date", "betType", "oddtype", "odd", "totalhandicap"), with = FALSE]
details <- details[bookmaker != 'Betfair Exchange']
details[,time:=anytime(date)]
details
details_otherbets <- details[betType != "1x2"]
details <- details[betType == '1x2']
details[, c("totalhandicap" , "betType", "date", "time") := NULL]
details
#details[matchId == "zZ6f59Ue"][bookmaker == "bwin"][oddtype == "odd1"]
### nice example of changing data
details_change <- data.table(details_change)[, c("matchId", "bookmaker", "betType", "oddtype", "date", "odd"), with = FALSE]
details_change <- details_change[bookmaker != 'Betfair Exchange']
details_change[,time:=anytime(date)]
details_change <- details_change[betType == '1x2']
details_change[, c("betType", "date") := NULL]
cols <- c("odd","time")
anscols <- paste("lead", cols, sep="_")
details_change[, (anscols) := shift(.SD, 1, "lead"), .SDcols=cols, by = c("matchId", "bookmaker", "oddtype")]
details_change <- details_change[complete.cases(details_change)]
#details_change[matchId == "zZ6f59Ue"][bookmaker == "bwin"][oddtype == "odd1"]
details_change[, odd_diff := (odd - lead_odd)/odd , by = c("matchId", "bookmaker", "oddtype")]
details_change[, time_diff := as.integer(difftime(anytime(time), anytime(lead_time),units = "hours")), by = c("matchId", "bookmaker", "oddtype")]
details_change <- details_change[time_diff != 0]
#details_change <- details_change[odd_diff != 0]
details_change[, diff := odd_diff / time_diff, by = c("matchId", "bookmaker", "oddtype")]
details_change <- merge(details_change, matches[,c("matchId", "winner")], by = "matchId")
details_change
details_change[, c("odd", "time", "lead_odd", "lead_time", "odd_diff", "time_diff") := NULL]
details_change
details_change <- details_change[, avg:= mean(diff), by = c("matchId", "bookmaker", "oddtype")]
details_change
details_change
#prepare first & last
key(details) <- c("matchId", "bookmaker", "oddtype")
#first <- details[unique(details[,key(details), with = FALSE]), mult = 'first']
last <- details[unique(details[,key(details), with = FALSE]), mult = 'last']
set_directory("code")
################  NOT FOR MODELS ##############
### calculate RPS for all matches using Basic and Shin probs
source("calculate_rps.R")
################  NOT FOR MODELS ##############
### calculate RPS for all matches using Basic and Shin probs
source("calculate_rps.R")
lastrps
### converting odds to basic and shin probabilities, gives insiders
source("convert_odds.R")
last
last
################################################
# read and prepare dataframes
# 1 - details (matchId, bookmaker, oddtype, odd)
# 2 - matches (matchId, score, home, away, date, over_under, winner, season)
# 3 - first (matchId, bookmaker, oddtype, odd)
# 4 - last (matchId, bookmaker, oddtype, odd)
# 5 - next_matches (matchId, score, home, away, date)
# 6 - details_change
################################################
source("get_dataframes.R")
### converting odds to basic and shin probabilities, gives insiders
source("convert_odds.R")
last
last
################  NOT FOR MODELS ##############
### calculate RPS for all matches using Basic and Shin probs
source("calculate_rps.R")
last
lastrps
shin_wide <- widening(last, bookiesToKeep)
shin_wide
lastrps
lastrps[,c(1:5)]
insider
last
insider
#bence böyle widelayalım
#we will do widening inside of our model prepration
shin_insider <- merge(last, insider, by = c("matchId", "bookmaker"))
shin_insider
#bence böyle widelayalım
#we will do widening inside of our model prepration
shin_insider <- merge(lastrps[,c(1:5)], insider, by = c("matchId", "bookmaker"))
shin_insider
details_change[,c("matchId", "bookmaker", "oddtype", "diff")],by = c("matchId", "bookmaker", "oddtype")
details_change[,c("matchId", "bookmaker", "oddtype", "diff")]
last
shin_changes <- merge(last, details_change[,c("matchId", "bookmaker", "oddtype", "diff")],by = c("matchId", "bookmaker", "oddtype"))
shin_changes
widening(shin_changes, bookiesToKeep)
shin_changes_wide <- widening(shin_changes, bookiesToKeep)
View(shin_changes_wide)
View(shin_changes_wide)
shin_changes
widening_others(shin_changes, bookiesToKeep)
reshape(shin_changes, idvar = c("matchId", "bookmaker"), timevar = c("oddtype"), direction = "wide")
shin_changes <- merge(shin_changes, insider, by = c("matchId", "bookmaker"))
shin_changes <- merge(last, details_change[,c("matchId", "bookmaker", "oddtype", "diff")],by = c("matchId", "bookmaker", "oddtype"))
shin_changes <- reshape(shin_changes, idvar = c("matchId", "bookmaker"), timevar = c("oddtype"), direction = "wide")
shin_changes <- merge(shin_changes, insider, by = c("matchId", "bookmaker"))
shin_changes
source("train_models.R")
last
